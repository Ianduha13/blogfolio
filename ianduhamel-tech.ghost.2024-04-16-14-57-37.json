{
  "db": [
    {
      "meta": {
        "exported_on": 1713279457943,
        "version": "5.82.1"
      },
      "data": {
        "posts": [
          {
            "id": "65fcbc07e1088e0008f7f044",
            "uuid": "aa9b2431-87fd-417f-b45e-6e09003b3953",
            "title": "About Me",
            "slug": "about",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Hi! I'm Ian, a 23-year-old Javascript Developer. I consider myself an autodidact, unable to succeed in any traditional education system, but I made my way through the industry and became a tech lead with almost 2 years of experience.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I love video games, they're my way to hang out with friends even when we're far apart. I really get into collecting achievements in games (it's kind of my thing). \",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I'm from Argentina, known for Messi, football, mate, asado, and tango. It's a place with a lot of pride and culture. Even though I'm not from Buenos Aires, the energy and passion of the country are part of who I am.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now I'm living in Brazil, loving the beaches and the food here. Brazil's vibe is contagious, and it's all about enjoying life, something I'm all in for.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"My journey is accompanied by my two feline friends, Vladimir, the mysterious black cat, and Karma, the dapper tuxedo cat, who add a touch of whimsy to my daily life.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/IMG_1512.jpg\",\"width\":3024,\"height\":1701,\"title\":\"\",\"alt\":\"\",\"caption\":\"<span style=\\\"white-space: pre-wrap;\\\">Here they're, this is my preferred way to start a day, reading with good company</span>\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Journey So Far\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"My programming journey started two years ago, driven by a huge curiosity and love for tech and video games. But it quickly turned into much more than a hobby. In these two years, I've done a lot of different things. I began working on my own as a freelancer, helping out on projects that grew to be pretty big. For example, I worked on Bookster, an education startup with an app available on both the App Store and Google Play.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Alongside freelancing, I've been part of some cool teams. I started as an intern at Jethi Tech, then moved to Hashi where I worked my way up to becoming a Tech Lead. Through all this, I've learned a ton, not just about coding but also about working together with other people to make something great.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I'm really into the open-source community. I love how everyone helps each other out and shares their work. That's a big reason why I blog, to share what I've learned and hopefully help others the way I've been helped.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"When I first started coding, I began with the basics (HTML, CSS, and JavaScript). I quickly moved on to React, and after understanding most of the responsive layout concepts, I ventured into the MERN stack to build more complex applications. \",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"My ambition didn't stop there, I jumped right into Next.js to develop full-stack applications. Joining Hashi required me to learn how to integrate event-driven analytics with Amplitude into our product. This experience sparked a passion in me for analyzing user behavior (basically, my secret is never stop learning or doing)\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now, I've mastered that stack and feel confident working with almost any JavaScript framework needed for a project, whether it's backend, frontend, apps, or analytics. My journey has equipped me with the skills and versatility to tackle a wide range of challenges in the tech world.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Why I Blog\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Originally starting on Medium, my blogging was a way to document my learning journey, offering a glimpse into the successes and stumbles of a self-taught developer. But it evolved into something more—a platform to share, connect, and give back to the vibrant community that has supported me. My blog has become my personal knowledge library, a testament to the open-source projects I admire, and a space where I share my adventures in developing tools like an npm library for React Native. It's about contributing to a community that thrives on mutual support and continuous learning.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Reflecting and Looking Ahead\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As for what’s next, I’m keen on blending my programming skills with my gaming passion to create new experiences. Whether it’s through open-source contributions or personal projects, I’m excited to see where this fusion will lead. The journey ahead is filled with unknowns, but it’s the learning, the creating, and the community that make it worthwhile.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s Connect\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you’re navigating the world of coding, share a penchant for gaming, or are interested in tech and open-source projects, I’d love to connect. It’s through our shared stories and experiences that we can learn and grow together.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Thank you for stopping by. In this ever-evolving journey of coding and gaming, the next adventure is just around the corner. Let’s explore it together, sharing knowledge and supporting one another along the way.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Hi! I'm Ian, a 23-year-old Javascript Developer. I consider myself an autodidact, unable to succeed in any traditional education system, but I made my way through the industry and became a tech lead with almost 2 years of experience.<br><br>I love video games, they're my way to hang out with friends even when we're far apart. I really get into collecting achievements in games (it's kind of my thing). <br><br>I'm from Argentina, known for Messi, football, mate, asado, and tango. It's a place with a lot of pride and culture. Even though I'm not from Buenos Aires, the energy and passion of the country are part of who I am.</p><p>Now I'm living in Brazil, loving the beaches and the food here. Brazil's vibe is contagious, and it's all about enjoying life, something I'm all in for.<br><br>My journey is accompanied by my two feline friends, Vladimir, the mysterious black cat, and Karma, the dapper tuxedo cat, who add a touch of whimsy to my daily life.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2024/03/IMG_1512.jpg\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1125\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/IMG_1512.jpg 600w, __GHOST_URL__/content/images/size/w1000/2024/03/IMG_1512.jpg 1000w, __GHOST_URL__/content/images/size/w1600/2024/03/IMG_1512.jpg 1600w, __GHOST_URL__/content/images/size/w2400/2024/03/IMG_1512.jpg 2400w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Here they're, this is my preferred way to start a day, reading with good company</span></figcaption></figure><h3 id=\"the-journey-so-far\">The Journey So Far</h3><p>My programming journey started two years ago, driven by a huge curiosity and love for tech and video games. But it quickly turned into much more than a hobby. In these two years, I've done a lot of different things. I began working on my own as a freelancer, helping out on projects that grew to be pretty big. For example, I worked on Bookster, an education startup with an app available on both the App Store and Google Play.</p><p>Alongside freelancing, I've been part of some cool teams. I started as an intern at Jethi Tech, then moved to Hashi where I worked my way up to becoming a Tech Lead. Through all this, I've learned a ton, not just about coding but also about working together with other people to make something great.</p><p>I'm really into the open-source community. I love how everyone helps each other out and shares their work. That's a big reason why I blog, to share what I've learned and hopefully help others the way I've been helped.</p><p>When I first started coding, I began with the basics (HTML, CSS, and JavaScript). I quickly moved on to React, and after understanding most of the responsive layout concepts, I ventured into the MERN stack to build more complex applications. <br>My ambition didn't stop there, I jumped right into Next.js to develop full-stack applications. Joining Hashi required me to learn how to integrate event-driven analytics with Amplitude into our product. This experience sparked a passion in me for analyzing user behavior (basically, my secret is never stop learning or doing)</p><p>Now, I've mastered that stack and feel confident working with almost any JavaScript framework needed for a project, whether it's backend, frontend, apps, or analytics. My journey has equipped me with the skills and versatility to tackle a wide range of challenges in the tech world.</p><h3 id=\"why-i-blog\">Why I Blog</h3><p>Originally starting on Medium, my blogging was a way to document my learning journey, offering a glimpse into the successes and stumbles of a self-taught developer. But it evolved into something more—a platform to share, connect, and give back to the vibrant community that has supported me. My blog has become my personal knowledge library, a testament to the open-source projects I admire, and a space where I share my adventures in developing tools like an npm library for React Native. It's about contributing to a community that thrives on mutual support and continuous learning.</p><h3 id=\"reflecting-and-looking-ahead\">Reflecting and Looking Ahead</h3><p>As for what’s next, I’m keen on blending my programming skills with my gaming passion to create new experiences. Whether it’s through open-source contributions or personal projects, I’m excited to see where this fusion will lead. The journey ahead is filled with unknowns, but it’s the learning, the creating, and the community that make it worthwhile.</p><h3 id=\"let%E2%80%99s-connect\">Let’s Connect</h3><p>If you’re navigating the world of coding, share a penchant for gaming, or are interested in tech and open-source projects, I’d love to connect. It’s through our shared stories and experiences that we can learn and grow together.</p><p>Thank you for stopping by. In this ever-evolving journey of coding and gaming, the next adventure is just around the corner. Let’s explore it together, sharing knowledge and supporting one another along the way.</p>",
            "comment_id": "65fcbc07e1088e0008f7f044",
            "plaintext": "Hi! I'm Ian, a 23-year-old Javascript Developer. I consider myself an autodidact, unable to succeed in any traditional education system, but I made my way through the industry and became a tech lead with almost 2 years of experience.\n\nI love video games, they're my way to hang out with friends even when we're far apart. I really get into collecting achievements in games (it's kind of my thing).\n\nI'm from Argentina, known for Messi, football, mate, asado, and tango. It's a place with a lot of pride and culture. Even though I'm not from Buenos Aires, the energy and passion of the country are part of who I am.\n\nNow I'm living in Brazil, loving the beaches and the food here. Brazil's vibe is contagious, and it's all about enjoying life, something I'm all in for.\n\nMy journey is accompanied by my two feline friends, Vladimir, the mysterious black cat, and Karma, the dapper tuxedo cat, who add a touch of whimsy to my daily life.\n\n\nThe Journey So Far\n\nMy programming journey started two years ago, driven by a huge curiosity and love for tech and video games. But it quickly turned into much more than a hobby. In these two years, I've done a lot of different things. I began working on my own as a freelancer, helping out on projects that grew to be pretty big. For example, I worked on Bookster, an education startup with an app available on both the App Store and Google Play.\n\nAlongside freelancing, I've been part of some cool teams. I started as an intern at Jethi Tech, then moved to Hashi where I worked my way up to becoming a Tech Lead. Through all this, I've learned a ton, not just about coding but also about working together with other people to make something great.\n\nI'm really into the open-source community. I love how everyone helps each other out and shares their work. That's a big reason why I blog, to share what I've learned and hopefully help others the way I've been helped.\n\nWhen I first started coding, I began with the basics (HTML, CSS, and JavaScript). I quickly moved on to React, and after understanding most of the responsive layout concepts, I ventured into the MERN stack to build more complex applications.\nMy ambition didn't stop there, I jumped right into Next.js to develop full-stack applications. Joining Hashi required me to learn how to integrate event-driven analytics with Amplitude into our product. This experience sparked a passion in me for analyzing user behavior (basically, my secret is never stop learning or doing)\n\nNow, I've mastered that stack and feel confident working with almost any JavaScript framework needed for a project, whether it's backend, frontend, apps, or analytics. My journey has equipped me with the skills and versatility to tackle a wide range of challenges in the tech world.\n\n\nWhy I Blog\n\nOriginally starting on Medium, my blogging was a way to document my learning journey, offering a glimpse into the successes and stumbles of a self-taught developer. But it evolved into something more—a platform to share, connect, and give back to the vibrant community that has supported me. My blog has become my personal knowledge library, a testament to the open-source projects I admire, and a space where I share my adventures in developing tools like an npm library for React Native. It's about contributing to a community that thrives on mutual support and continuous learning.\n\n\nReflecting and Looking Ahead\n\nAs for what’s next, I’m keen on blending my programming skills with my gaming passion to create new experiences. Whether it’s through open-source contributions or personal projects, I’m excited to see where this fusion will lead. The journey ahead is filled with unknowns, but it’s the learning, the creating, and the community that make it worthwhile.\n\n\nLet’s Connect\n\nIf you’re navigating the world of coding, share a penchant for gaming, or are interested in tech and open-source projects, I’d love to connect. It’s through our shared stories and experiences that we can learn and grow together.\n\nThank you for stopping by. In this ever-evolving journey of coding and gaming, the next adventure is just around the corner. Let’s explore it together, sharing knowledge and supporting one another along the way.",
            "feature_image": "__GHOST_URL__/content/images/2024/03/IMG_4542-1.jpg",
            "featured": 0,
            "type": "page",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-03-21T23:00:23.000Z",
            "updated_at": "2024-03-26T02:25:35.000Z",
            "published_at": "2024-03-21T23:00:23.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd11f84311690001e6cd6a",
            "uuid": "88609c80-7fbb-4c5d-a8d7-7cef12d6cfb2",
            "title": "How to Implement Amplitude in Next.js 14 App Router",
            "slug": "how-to-implement-amplitude-in-next-js-14-app-router",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Updated to 2024 standards\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this data-driven era, analytic tools like Amplitude Analytics are indispensable for startups. Amplitude, with its event-based analysis method, offers deep insights into user interactions. This is particularly critical during a product’s growth stages, as it allows for immediate evaluation of feature effectiveness upon production release. This enables rapid experimentation with different UI/UX strategies and the identification of problem areas. Effectively leveraging these insights can lead to a user experience finely tuned to your product’s audience, significantly boosting user retention. This article provides a guide on integrating Amplitude into a Next.js 14 App Router application, leveraging the latest advancements in frontend development.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Author note: \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Reflecting on my journey with Amplitude and Next.js, it’s astounding to see how much has changed since my first integration project. Back in the days of Next 12, everything was new and challenging. Now, after numerous integrations across personal, freelance, and professional projects, my expertise in Next.js, React, and React Native has grown immensely. I even shared my insights on integrating Amplitude in React Native in my last \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"blog\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"post\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":\"_blank\",\"title\":null,\"url\":\"https://medium.com/javascript-in-plain-english/empowering-your-mobile-app-integrating-amplitude-analytics-in-react-native-cb757722d5d4\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As technology evolves, so does the server-side rendering capabilities and techniques recommended by Next.js. Keeping up-to-date is crucial, and that’s why, almost a year later, I’m revisiting this blog to infuse it with the wealth of experience I’ve gained and leveling up to the app router and server components.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here’s a disclaimer: this is my subjective approach to setting up Amplitude in a Next.js app (I’m not a part of Amplitude’s team, yet 😆). There were numerous hurdles initially, and a guide like this would have been a lifesaver. Hopefully, my experiences can smooth out your learning path. For newcomers, check out the official Amplitude documentation \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"here\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://www.docs.developers.amplitude.com/data/sdks/browser-2/\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I’m going to assume that you have already created an account and obtained an API code from Amplitude. If you need help, don’t hesitate to ask in the comments or through Github Discussions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"For a practical start, explore this resources:\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Example Repo\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://github.com/Ianduha13/nextjs14-amplitude-integration\"},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\" 😺\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Online demo\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://next-amplitude.vercel.app/\"},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\" 👾\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-quote\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Setting up a Next.js Application\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"First, create a new Next.js application and install the Amplitude library with the following commands:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"yarn create next-app\\nyarn add @amplitude/analytics-browser\",\"language\":\"bash\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"You can also clone the repository that I made to explain this blog:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"git clone git@github.com:Ianduha13/nextjs14-amplitude-integration.git\",\"language\":\"bash\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Next, create a \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\".env\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" file in your project's root directory and add your Amplitude API key:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"NEXT_PUBLIC_AMPLITUDE_API_KEY=Your_Amplitude_API_Key\",\"language\":\"env\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Implement Amplitude in your Code\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"To integrate Amplitude, certain functions need to be included in your code. This involves initializing the Amplitude SDK and setting up event tracking.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Initialize Amplitude SDK: \",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Based on my experience, I recommend encapsulating the SDK initialization logic in a context. This is particularly beneficial with Next.js’s App Router components, which are Server Components by default but can freely utilize a client context provider. This approach enables you to wrap your entire application and provide custom methods for using the SDK across all your client components (note: the Amplitude SDK is only available on the client side).\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"\\\"use client\\\";\\nimport { useEffect, createContext } from \\\"react\\\";\\nimport { init, track } from \\\"@amplitude/analytics-browser\\\";\\n\\nconst AMPLITUDE_API_KEY = process.env.NEXT_PUBLIC_AMPLITUDE_API_KEY;\\n\\nexport const AmplitudeContext = createContext({});\\n\\nconst AmplitudeContextProvider = ({ children }) => {\\n  useEffect(() => {\\n    init(AMPLITUDE_API_KEY, undefined, {\\n      defaultTracking: {\\n        sessions: true,\\n      },\\n    });\\n  }, []);\",\"language\":\"Javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"init\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" method plays a critical role in initializing the Amplitude SDK within your project. It's essential to call this method only on the first render, or at the specific moment you wish to start tracking user interactions. This ensures that the SDK setup doesn't unnecessarily repeat, which could lead to performance issues or skewed analytics.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The configurations used in the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"init\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" method should align with the recommendations from the Amplitude documentation. In this case, I utilized \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sessions\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" between the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"defaultTracking\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"options. By tailoring these settings, you can fine-tune the analytics to match the specific needs of your application.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Custom Tracking Functions:\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Incorporating the Amplitude SDK into a Next.js application can be greatly optimized by defining custom functions within your context. These functions serve as a simplified and reusable interface for tracking specific events, ensuring consistency and efficiency across your application. Here’s how you can set up a basic custom tracking function:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"// ...AmplitudeContextProvider previous setup\\nconst trackAmplitudeEvent = (eventName, eventProperties) => {\\n    track(eventName, eventProperties);\\n};\\n\\nconst value = { trackAmplitudeEvent };\\n\\nreturn (\\n    <AmplitudeContext.Provider value={value}>\\n      {children}\\n    </AmplitudeContext.Provider>\\n  );\\n};\\n\\nexport default AmplitudeContextProvider;\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Then, in your root layout.js import the context provider and wrap your application.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"//...Other imports\\nimport AmplitudeContextProvider from \\\"@/context/AmplitudeContext\\\";\\n \\n//...Layout configs\\nexport default function RootLayout({ children }) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className={inter.className}>\\n        <AmplitudeContextProvider>\\n          {children}\\n        </AmplitudeContextProvider>\\n      </body>\\n    </html>\\n  );\\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Once you finished with the context setup, a good practice to interact with it is using a custom hook:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import { useContext } from \\\"react\\\";\\nimport { AmplitudeContext } from \\\"../context/AmplitudeContext\\\";\\n\\nconst useAmplitudeContext = () => {\\n  const context = useContext(AmplitudeContext);\\n  if (context === undefined)\\n    throw new Error(\\n      \\\"useAmplitudeContext must be used within a AmplitudeContextProvider\\\"\\n    );\\n  return context;\\n};\\n\\nexport default useAmplitudeContext;\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now you can use all the functions defined on the context on every client component that instantiates this custom hook 👆.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Starting to Track Events:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Once you’ve completed the setup, you’re ready to implement your tracking strategy within your code. In this hands-on example, we’ve crafted a button that does more than just respond to clicks. It turns each click into a data point, capturing the action and sending a hardcoded text message as an event property. Event and users properties and tracking strategies are really interestings topics, and we’ll explore that in a future blog 😉. \",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"But for now, let’s focus on this example:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"\\\"use client\\\";\\nimport useAmplitudeContext from \\\"@/hooks/useAmplitudeContext\\\";\\n\\nconst EventButton = () => {\\n  const { trackAmplitudeEvent } = useAmplitudeContext();\\n\\n  const clickHandler = () => {\\n    trackAmplitudeEvent(\\\"click\\\", {\\n      text: \\\"each click is a new event, and each star or like helps me a lot!\\\",\\n    });\\n  };\\n\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      className=\\\"bg-[#e8378b] w-96 py-6 text-center font-semibold px-10 mx-auto rounded-xl hover:scale-95 active:scale-105 transition-all duration-100 ease-in-out\\\"\\n      onClick={clickHandler}\\n    >\\n      Press me to trigger an event!\\n    </button>\\n  );\\n};\\n\\nexport default EventButton;\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Breaking Down the Code:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Custom Hook (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useAmplitudeContext\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"): This hook connects us to AmplitudeContext, housing our \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"trackAmplitudeEvent\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" custom function.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Event Tracking Function (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"trackAmplitudeEvent\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"): This function requires two arguments: the event name and an object with event properties (the last one it’s optional).\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Button Component (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"EventButton\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"): Here, our UI element becomes interactive. The button, when clicked, activates the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"clickHandler\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", which in turn invokes \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"trackAmplitudeEvent\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", dispatching the event information to Amplitude. 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Note that this example is a simplified version of which could be a production level analytics tracking, you have a lot of methods on the SDK with diferent purposes that will help you to know more about the usage of your product.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"It’s amazing the world of possibilities that working with event-driven analytics opens up for us as developers, plus Amplitude is hugely customizable.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Congratulations! You can now visualize your first events on Amplitude 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"To view the tracked events, head to your Amplitude dashboard and select user-lookup in your navbar. You should see something like this:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/amplitudetable.png\",\"width\":800,\"height\":399,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you want to see the “user stream” made for a user, you can select the userID provided in that list.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Which will display the following profile card, here you can visualize many very interesting and customizable data that can be very helpful when evaluating the engagement of a certain feature:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/amplitude2.png\",\"width\":800,\"height\":364,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"And that’s it! When a user press the button on the page, it triggers an event in the Amplitude analytics log. With this data, you can create custom charts and dashboards to better understand how your product is being used, all in-lined with your specific business needs.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"💡 Here I leave you an official source to practice with sample data in a premium environment: https://analytics.amplitude.com/demo/home\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-quote\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Bonus Track: Online demo\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/amplitude3.png\",\"width\":800,\"height\":403,\"title\":\"\",\"alt\":\"\",\"caption\":\"<span style=\\\"white-space: pre-wrap;\\\">Here is the page we developed through this tutorial, complicated, isn’t it? 🤣</span>\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Jokes aside, here’s a link to the online demo: \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"https://next-amplitude.vercel.app/\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://next-amplitude.vercel.app/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you visit the link and press the button, you’ll witness a real-time change in the chart within the Amplitude public link provided in the second button. You’ll see something like this:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/amplitude4.png\",\"width\":800,\"height\":370,\"title\":\"\",\"alt\":\"\",\"caption\":\"<span style=\\\"white-space: pre-wrap;\\\">Apologies if the chart is somewhat condensed, but charts can’t be shared with full access links as editors on Amplitude’s free plan.</span>\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Thank you for reading my article! It was a great experience for me, and I hope you found it valuable.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As a JavaScript developer, I’ll be sharing more insights and updates on my journey. If you’re interested in staying updated with my future posts, you can follow me on the following links:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I look forward to connecting with other developers 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Warm regards,\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ian Duhamel CTO at \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Devink\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":\"_blank\",\"title\":null,\"url\":\"https://www.linkedin.com/company/devink-solutions/\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h4 id=\"updated-to-2024-standards\">Updated to 2024 standards</h4><p><em>In this data-driven era, analytic tools like Amplitude Analytics are indispensable for startups. Amplitude, with its event-based analysis method, offers deep insights into user interactions. This is particularly critical during a product’s growth stages, as it allows for immediate evaluation of feature effectiveness upon production release. This enables rapid experimentation with different UI/UX strategies and the identification of problem areas. Effectively leveraging these insights can lead to a user experience finely tuned to your product’s audience, significantly boosting user retention. This article provides a guide on integrating Amplitude into a Next.js 14 App Router application, leveraging the latest advancements in frontend development.</em></p><p><strong>Author note: </strong>Reflecting on my journey with Amplitude and Next.js, it’s astounding to see how much has changed since my first integration project. Back in the days of Next 12, everything was new and challenging. Now, after numerous integrations across personal, freelance, and professional projects, my expertise in Next.js, React, and React Native has grown immensely. I even shared my insights on integrating Amplitude in React Native in my last <a href=\"https://medium.com/javascript-in-plain-english/empowering-your-mobile-app-integrating-amplitude-analytics-in-react-native-cb757722d5d4\"><strong>blog</strong> <strong>post</strong></a>.</p><p>As technology evolves, so does the server-side rendering capabilities and techniques recommended by Next.js. Keeping up-to-date is crucial, and that’s why, almost a year later, I’m revisiting this blog to infuse it with the wealth of experience I’ve gained and leveling up to the app router and server components.</p><p>Here’s a disclaimer: this is my subjective approach to setting up Amplitude in a Next.js app (I’m not a part of Amplitude’s team, yet 😆). There were numerous hurdles initially, and a guide like this would have been a lifesaver. Hopefully, my experiences can smooth out your learning path. For newcomers, check out the official Amplitude documentation <a href=\"https://www.docs.developers.amplitude.com/data/sdks/browser-2/\" rel=\"noopener\"><strong>here</strong></a>.</p><p>I’m going to assume that you have already created an account and obtained an API code from Amplitude. If you need help, don’t hesitate to ask in the comments or through Github Discussions.</p><blockquote>For a practical start, explore this resources:<br>- <a href=\"https://github.com/Ianduha13/nextjs14-amplitude-integration\" rel=\"noopener\"><strong>Example Repo</strong></a><strong> 😺</strong><br>- <a href=\"https://next-amplitude.vercel.app/\" rel=\"noopener\"><strong>Online demo</strong></a><strong> 👾</strong></blockquote><h4 id=\"setting-up-a-nextjs-application\">Setting up a Next.js Application</h4><p>First, create a new Next.js application and install the Amplitude library with the following commands:</p><pre><code class=\"language-bash\">yarn create next-app\nyarn add @amplitude/analytics-browser</code></pre><p>You can also clone the repository that I made to explain this blog:</p><pre><code class=\"language-bash\">git clone git@github.com:Ianduha13/nextjs14-amplitude-integration.git</code></pre><p>Next, create a&nbsp;<code>.env</code> file in your project's root directory and add your Amplitude API key:</p><pre><code class=\"language-env\">NEXT_PUBLIC_AMPLITUDE_API_KEY=Your_Amplitude_API_Key</code></pre><h4 id=\"implement-amplitude-in-your-code\">Implement Amplitude in your&nbsp;Code</h4><p>To integrate Amplitude, certain functions need to be included in your code. This involves initializing the Amplitude SDK and setting up event tracking.</p><p><strong>Initialize Amplitude SDK:&nbsp;</strong><br>Based on my experience, I recommend encapsulating the SDK initialization logic in a context. This is particularly beneficial with Next.js’s App Router components, which are Server Components by default but can freely utilize a client context provider. This approach enables you to wrap your entire application and provide custom methods for using the SDK across all your client components (note: the Amplitude SDK is only available on the client side).</p><pre><code class=\"language-Javascript\">\"use client\";\nimport { useEffect, createContext } from \"react\";\nimport { init, track } from \"@amplitude/analytics-browser\";\n\nconst AMPLITUDE_API_KEY = process.env.NEXT_PUBLIC_AMPLITUDE_API_KEY;\n\nexport const AmplitudeContext = createContext({});\n\nconst AmplitudeContextProvider = ({ children }) =&gt; {\n  useEffect(() =&gt; {\n    init(AMPLITUDE_API_KEY, undefined, {\n      defaultTracking: {\n        sessions: true,\n      },\n    });\n  }, []);</code></pre><p>The <code>init</code> method plays a critical role in initializing the Amplitude SDK within your project. It's essential to call this method only on the first render, or at the specific moment you wish to start tracking user interactions. This ensures that the SDK setup doesn't unnecessarily repeat, which could lead to performance issues or skewed analytics.</p><p>The configurations used in the <code>init</code> method should align with the recommendations from the Amplitude documentation. In this case, I utilized <code>sessions</code> between the <code>defaultTracking</code>options. By tailoring these settings, you can fine-tune the analytics to match the specific needs of your application.</p><p><strong>Custom Tracking Functions:</strong><br>Incorporating the Amplitude SDK into a Next.js application can be greatly optimized by defining custom functions within your context. These functions serve as a simplified and reusable interface for tracking specific events, ensuring consistency and efficiency across your application. Here’s how you can set up a basic custom tracking function:</p><pre><code class=\"language-javascript\">// ...AmplitudeContextProvider previous setup\nconst trackAmplitudeEvent = (eventName, eventProperties) =&gt; {\n    track(eventName, eventProperties);\n};\n\nconst value = { trackAmplitudeEvent };\n\nreturn (\n    &lt;AmplitudeContext.Provider value={value}&gt;\n      {children}\n    &lt;/AmplitudeContext.Provider&gt;\n  );\n};\n\nexport default AmplitudeContextProvider;</code></pre><p>Then, in your root layout.js import the context provider and wrap your application.</p><pre><code class=\"language-javascript\">//...Other imports\nimport AmplitudeContextProvider from \"@/context/AmplitudeContext\";\n \n//...Layout configs\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"en\"&gt;\n      &lt;body className={inter.className}&gt;\n        &lt;AmplitudeContextProvider&gt;\n          {children}\n        &lt;/AmplitudeContextProvider&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}</code></pre><p>Once you finished with the context setup, a good practice to interact with it is using a custom hook:</p><pre><code class=\"language-javascript\">import { useContext } from \"react\";\nimport { AmplitudeContext } from \"../context/AmplitudeContext\";\n\nconst useAmplitudeContext = () =&gt; {\n  const context = useContext(AmplitudeContext);\n  if (context === undefined)\n    throw new Error(\n      \"useAmplitudeContext must be used within a AmplitudeContextProvider\"\n    );\n  return context;\n};\n\nexport default useAmplitudeContext;</code></pre><p>Now you can use all the functions defined on the context on every client component that instantiates this custom hook 👆.</p><h4 id=\"starting-to-track-events\">Starting to Track&nbsp;Events:</h4><p>Once you’ve completed the setup, you’re ready to implement your tracking strategy within your code. In this hands-on example, we’ve crafted a button that does more than just respond to clicks. It turns each click into a data point, capturing the action and sending a hardcoded text message as an event property. Event and users properties and tracking strategies are really interestings topics, and we’ll explore that in a future blog 😉.&nbsp;<br>But for now, let’s focus on this example:</p><pre><code class=\"language-javascript\">\"use client\";\nimport useAmplitudeContext from \"@/hooks/useAmplitudeContext\";\n\nconst EventButton = () =&gt; {\n  const { trackAmplitudeEvent } = useAmplitudeContext();\n\n  const clickHandler = () =&gt; {\n    trackAmplitudeEvent(\"click\", {\n      text: \"each click is a new event, and each star or like helps me a lot!\",\n    });\n  };\n\n  return (\n    &lt;button\n      type=\"button\"\n      className=\"bg-[#e8378b] w-96 py-6 text-center font-semibold px-10 mx-auto rounded-xl hover:scale-95 active:scale-105 transition-all duration-100 ease-in-out\"\n      onClick={clickHandler}\n    &gt;\n      Press me to trigger an event!\n    &lt;/button&gt;\n  );\n};\n\nexport default EventButton;</code></pre><p><strong>Breaking Down the Code:</strong></p><ul><li>The Custom Hook (<code>useAmplitudeContext</code>): This hook connects us to AmplitudeContext, housing our <code>trackAmplitudeEvent</code> custom function.</li><li>Event Tracking Function (<code>trackAmplitudeEvent</code>): This function requires two arguments: the event name and an object with event properties (the last one it’s optional).</li><li>Button Component (<code>EventButton</code>): Here, our UI element becomes interactive. The button, when clicked, activates the <code>clickHandler</code>, which in turn invokes <code>trackAmplitudeEvent</code>, dispatching the event information to Amplitude. 🚀</li></ul><p>Note that this example is a simplified version of which could be a production level analytics tracking, you have a lot of methods on the SDK with diferent purposes that will help you to know more about the usage of your product.<br>It’s amazing the world of possibilities that working with event-driven analytics opens up for us as developers, plus Amplitude is hugely customizable.</p><h4 id=\"congratulations-you-can-now-visualize-your-first-events-on-amplitude-%F0%9F%9A%80\"><strong>Congratulations! You can now visualize your first events on Amplitude 🚀</strong></h4><p>To view the tracked events, head to your Amplitude dashboard and select user-lookup in your navbar. You should see something like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/amplitudetable.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"399\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/amplitudetable.png 600w, __GHOST_URL__/content/images/2024/03/amplitudetable.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><p>If you want to see the “user stream” made for a user, you can select the userID provided in that list.</p><p>Which will display the following profile card, here you can visualize many very interesting and customizable data that can be very helpful when evaluating the engagement of a certain feature:</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/amplitude2.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"364\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/amplitude2.png 600w, __GHOST_URL__/content/images/2024/03/amplitude2.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><p>And that’s it! When a user press the button on the page, it triggers an event in the Amplitude analytics log. With this data, you can create custom charts and dashboards to better understand how your product is being used, all in-lined with your specific business needs.</p><blockquote>💡 Here I leave you an official source to practice with sample data in a premium environment: https://analytics.amplitude.com/demo/home</blockquote><hr><h4 id=\"bonus-track-online-demo\">Bonus Track: Online&nbsp;demo</h4><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2024/03/amplitude3.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"403\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/amplitude3.png 600w, __GHOST_URL__/content/images/2024/03/amplitude3.png 800w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Here is the page we developed through this tutorial, complicated, isn’t it? 🤣</span></figcaption></figure><p>Jokes aside, here’s a link to the online demo: <a href=\"https://next-amplitude.vercel.app/\" rel=\"noopener\">https://next-amplitude.vercel.app/</a></p><p>If you visit the link and press the button, you’ll witness a real-time change in the chart within the Amplitude public link provided in the second button. You’ll see something like this:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2024/03/amplitude4.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"370\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/amplitude4.png 600w, __GHOST_URL__/content/images/2024/03/amplitude4.png 800w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Apologies if the chart is somewhat condensed, but charts can’t be shared with full access links as editors on Amplitude’s free plan.</span></figcaption></figure><p>Thank you for reading my article! It was a great experience for me, and I hope you found it valuable.</p><p>As a JavaScript developer, I’ll be sharing more insights and updates on my journey. If you’re interested in staying updated with my future posts, you can follow me on the following links:</p><ul><li><a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\">LinkedIn</a></li><li><a href=\"https://github.com/Ianduha13\" rel=\"noopener\">GitHub</a></li></ul><p>I look forward to connecting with other developers 😃</p><p>Warm regards,<br>Ian Duhamel CTO at <a href=\"https://www.linkedin.com/company/devink-solutions/\" rel=\"noopener\">Devink</a> 🚀</p>",
            "comment_id": "65fd11f84311690001e6cd6a",
            "plaintext": "Updated to 2024 standards\n\nIn this data-driven era, analytic tools like Amplitude Analytics are indispensable for startups. Amplitude, with its event-based analysis method, offers deep insights into user interactions. This is particularly critical during a product’s growth stages, as it allows for immediate evaluation of feature effectiveness upon production release. This enables rapid experimentation with different UI/UX strategies and the identification of problem areas. Effectively leveraging these insights can lead to a user experience finely tuned to your product’s audience, significantly boosting user retention. This article provides a guide on integrating Amplitude into a Next.js 14 App Router application, leveraging the latest advancements in frontend development.\n\nAuthor note: Reflecting on my journey with Amplitude and Next.js, it’s astounding to see how much has changed since my first integration project. Back in the days of Next 12, everything was new and challenging. Now, after numerous integrations across personal, freelance, and professional projects, my expertise in Next.js, React, and React Native has grown immensely. I even shared my insights on integrating Amplitude in React Native in my last blog post.\n\nAs technology evolves, so does the server-side rendering capabilities and techniques recommended by Next.js. Keeping up-to-date is crucial, and that’s why, almost a year later, I’m revisiting this blog to infuse it with the wealth of experience I’ve gained and leveling up to the app router and server components.\n\nHere’s a disclaimer: this is my subjective approach to setting up Amplitude in a Next.js app (I’m not a part of Amplitude’s team, yet 😆). There were numerous hurdles initially, and a guide like this would have been a lifesaver. Hopefully, my experiences can smooth out your learning path. For newcomers, check out the official Amplitude documentation here.\n\nI’m going to assume that you have already created an account and obtained an API code from Amplitude. If you need help, don’t hesitate to ask in the comments or through Github Discussions.\n\nFor a practical start, explore this resources:\n- Example Repo 😺\n- Online demo 👾\n\nSetting up a Next.js Application\n\nFirst, create a new Next.js application and install the Amplitude library with the following commands:\n\nyarn create next-app\nyarn add @amplitude/analytics-browser\n\nYou can also clone the repository that I made to explain this blog:\n\ngit clone git@github.com:Ianduha13/nextjs14-amplitude-integration.git\n\nNext, create a .env file in your project's root directory and add your Amplitude API key:\n\nNEXT_PUBLIC_AMPLITUDE_API_KEY=Your_Amplitude_API_Key\n\nImplement Amplitude in your Code\n\nTo integrate Amplitude, certain functions need to be included in your code. This involves initializing the Amplitude SDK and setting up event tracking.\n\nInitialize Amplitude SDK: \nBased on my experience, I recommend encapsulating the SDK initialization logic in a context. This is particularly beneficial with Next.js’s App Router components, which are Server Components by default but can freely utilize a client context provider. This approach enables you to wrap your entire application and provide custom methods for using the SDK across all your client components (note: the Amplitude SDK is only available on the client side).\n\n\"use client\";\nimport { useEffect, createContext } from \"react\";\nimport { init, track } from \"@amplitude/analytics-browser\";\n\nconst AMPLITUDE_API_KEY = process.env.NEXT_PUBLIC_AMPLITUDE_API_KEY;\n\nexport const AmplitudeContext = createContext({});\n\nconst AmplitudeContextProvider = ({ children }) => {\n  useEffect(() => {\n    init(AMPLITUDE_API_KEY, undefined, {\n      defaultTracking: {\n        sessions: true,\n      },\n    });\n  }, []);\n\nThe init method plays a critical role in initializing the Amplitude SDK within your project. It's essential to call this method only on the first render, or at the specific moment you wish to start tracking user interactions. This ensures that the SDK setup doesn't unnecessarily repeat, which could lead to performance issues or skewed analytics.\n\nThe configurations used in the init method should align with the recommendations from the Amplitude documentation. In this case, I utilized sessions between the defaultTrackingoptions. By tailoring these settings, you can fine-tune the analytics to match the specific needs of your application.\n\nCustom Tracking Functions:\nIncorporating the Amplitude SDK into a Next.js application can be greatly optimized by defining custom functions within your context. These functions serve as a simplified and reusable interface for tracking specific events, ensuring consistency and efficiency across your application. Here’s how you can set up a basic custom tracking function:\n\n// ...AmplitudeContextProvider previous setup\nconst trackAmplitudeEvent = (eventName, eventProperties) => {\n    track(eventName, eventProperties);\n};\n\nconst value = { trackAmplitudeEvent };\n\nreturn (\n    <AmplitudeContext.Provider value={value}>\n      {children}\n    </AmplitudeContext.Provider>\n  );\n};\n\nexport default AmplitudeContextProvider;\n\nThen, in your root layout.js import the context provider and wrap your application.\n\n//...Other imports\nimport AmplitudeContextProvider from \"@/context/AmplitudeContext\";\n \n//...Layout configs\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <AmplitudeContextProvider>\n          {children}\n        </AmplitudeContextProvider>\n      </body>\n    </html>\n  );\n}\n\nOnce you finished with the context setup, a good practice to interact with it is using a custom hook:\n\nimport { useContext } from \"react\";\nimport { AmplitudeContext } from \"../context/AmplitudeContext\";\n\nconst useAmplitudeContext = () => {\n  const context = useContext(AmplitudeContext);\n  if (context === undefined)\n    throw new Error(\n      \"useAmplitudeContext must be used within a AmplitudeContextProvider\"\n    );\n  return context;\n};\n\nexport default useAmplitudeContext;\n\nNow you can use all the functions defined on the context on every client component that instantiates this custom hook 👆.\n\nStarting to Track Events:\n\nOnce you’ve completed the setup, you’re ready to implement your tracking strategy within your code. In this hands-on example, we’ve crafted a button that does more than just respond to clicks. It turns each click into a data point, capturing the action and sending a hardcoded text message as an event property. Event and users properties and tracking strategies are really interestings topics, and we’ll explore that in a future blog 😉. \nBut for now, let’s focus on this example:\n\n\"use client\";\nimport useAmplitudeContext from \"@/hooks/useAmplitudeContext\";\n\nconst EventButton = () => {\n  const { trackAmplitudeEvent } = useAmplitudeContext();\n\n  const clickHandler = () => {\n    trackAmplitudeEvent(\"click\", {\n      text: \"each click is a new event, and each star or like helps me a lot!\",\n    });\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"bg-[#e8378b] w-96 py-6 text-center font-semibold px-10 mx-auto rounded-xl hover:scale-95 active:scale-105 transition-all duration-100 ease-in-out\"\n      onClick={clickHandler}\n    >\n      Press me to trigger an event!\n    </button>\n  );\n};\n\nexport default EventButton;\n\nBreaking Down the Code:\n\n * The Custom Hook (useAmplitudeContext): This hook connects us to AmplitudeContext, housing our trackAmplitudeEvent custom function.\n * Event Tracking Function (trackAmplitudeEvent): This function requires two arguments: the event name and an object with event properties (the last one it’s optional).\n * Button Component (EventButton): Here, our UI element becomes interactive. The button, when clicked, activates the clickHandler, which in turn invokes trackAmplitudeEvent, dispatching the event information to Amplitude. 🚀\n\nNote that this example is a simplified version of which could be a production level analytics tracking, you have a lot of methods on the SDK with diferent purposes that will help you to know more about the usage of your product.\nIt’s amazing the world of possibilities that working with event-driven analytics opens up for us as developers, plus Amplitude is hugely customizable.\n\nCongratulations! You can now visualize your first events on Amplitude 🚀\n\nTo view the tracked events, head to your Amplitude dashboard and select user-lookup in your navbar. You should see something like this:\n\nIf you want to see the “user stream” made for a user, you can select the userID provided in that list.\n\nWhich will display the following profile card, here you can visualize many very interesting and customizable data that can be very helpful when evaluating the engagement of a certain feature:\n\nAnd that’s it! When a user press the button on the page, it triggers an event in the Amplitude analytics log. With this data, you can create custom charts and dashboards to better understand how your product is being used, all in-lined with your specific business needs.\n\n💡 Here I leave you an official source to practice with sample data in a premium environment: https://analytics.amplitude.com/demo/home\n\nBonus Track: Online demo\n\nJokes aside, here’s a link to the online demo: https://next-amplitude.vercel.app/\n\nIf you visit the link and press the button, you’ll witness a real-time change in the chart within the Amplitude public link provided in the second button. You’ll see something like this:\n\nThank you for reading my article! It was a great experience for me, and I hope you found it valuable.\n\nAs a JavaScript developer, I’ll be sharing more insights and updates on my journey. If you’re interested in staying updated with my future posts, you can follow me on the following links:\n\n * LinkedIn\n * GitHub\n\nI look forward to connecting with other developers 😃\n\nWarm regards,\nIan Duhamel CTO at Devink 🚀",
            "feature_image": "__GHOST_URL__/content/images/2024/03/amplitude5.png",
            "featured": 1,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-03-22T05:07:04.000Z",
            "updated_at": "2024-03-22T21:08:10.000Z",
            "published_at": "2024-03-22T05:20:21.000Z",
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": "65fcbc06e1088e0008f7efc8",
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdc8",
            "uuid": "05a512dd-096b-417c-a6c8-e35c0f930f19",
            "title": "Modern Integration of Amplitude Analytics in React Native: A Step-by-Step Guide.",
            "slug": "empowering-your-mobile-app-integrating-amplitude-analytics-in-react-native",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In the ever-evolving landscape of mobile application development, analytics play a pivotal role in shaping user experience and guiding strategic decisions. Previously, I delved into the integration of Amplitude with Next.js in a \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"blog\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":null,\"target\":null,\"title\":null,\"url\":\"https://medium.com/javascript-in-plain-english/how-to-implement-amplitude-in-next-js-a-3-step-guide-6803c44ca862\"},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", highlighting how analytics can transform web applications. Now, I’m shifting my focus to mobile development, particularly React Native, to explore how Amplitude’s powerful analytics can be leveraged in this domain.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"React Native, a popular framework for building mobile applications, provides a unique set of challenges and opportunities for integrating analytics. In this comprehensive guide, I’ll walk you through the nuances of integrating Amplitude with React Native. We’ll cover the initial setup, event tracking, and utilizing analytics for insightful user data interpretation, drawing from my experience with Next.js and adapting these principles to the mobile environment.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Stay tuned as we embark on this journey to master Amplitude integration in React Native, enhancing our mobile applications with data-driven insights.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"What Makes Amplitude Special?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Amplitude stands out as a formidable product analytics platform, primarily due to its capacity to intricately track and comprehend user behavior. This platform is not just about tracking user data; it’s a tool that provides deep insights into user engagement, retention, and revenue generation.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Key Concepts of Amplitude\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Amplitude is rooted in event-based analytics, focusing on user-product interactions to analyze behavior in real-time. Understanding its key concepts is crucial:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"1. Events:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" Actions taken by users, like pressing the “Play Song” button in a music player app.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"2.\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Event Properties:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" Details about an event, such as the music genre in the above example.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"3. Users:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" The individuals interacting with your product.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"4. User Properties:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" Attributes of users, like whether they’re on a paid or free plan.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"5. Sessions:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" The duration a user interacts with your app.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In essence, Amplitude’s strength lies in its ability to keep data trustworthy and secure while offering powerful analytics tools to answer critical questions about user interactions and behaviors. This capability enhances collaboration across teams, driving growth and facilitating better product development.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Getting Started\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Installation\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Start by installing the Amplitude React Native SDK via NPM. This SDK is adaptable for both web and Expo projects. Ensure to also install \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"@react\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"http://twitter.com/react\"},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"-native-async-storage/async-storage\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" for the SDK to function effectively.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"npm install @amplitude/analytics-react-native \\nnpm install @react-native-async-storage/async-storage\",\"language\":\"bash\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"For iOS, proceed to install native modules:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"cd ios \\npod install\",\"language\":\"bash\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"SDK Initialization\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Initialization is a critical step. You need the API key from your Amplitude project. Optionally, a user ID and configuration object can also be included. This setup allows the SDK to be utilized throughout your application.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import { init } from '@amplitude/analytics-react-native' \\n \\n// Option 1: Initialize with API_KEY only \\ninit(API_KEY) \\n \\n// Option 2: Initialize including user ID \\ninit(API_KEY, 'user ID') \\n \\n// Option 3: Initialize with additional configuration \\ninit(API_KEY, 'user ID', { \\n disableCookies: true, // For web platform \\n})\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Advanced Configuration\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Amplitude SDK offers various configuration options, including batching behavior, EU data residency, and debugging levels. For instance, you can customize batch behavior with \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flushQueueSize \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flushIntervalMillis\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import { init } from '@amplitude/analytics-react-native' \\n \\ninit(API_KEY, OPTIONAL_USER_ID, { \\n flushQueueSize: 50, \\n flushIntervalMillis: 20000, \\n serverZone: 'EU', // For EU data residency \\n})\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you want to dig deeper on the Advanced SDK configs I let you a link to the official docs \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"here\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.docs.developers.amplitude.com/data/sdks/typescript-react-native/#initialize-the-sdk\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Basic Event Tracking\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Tracking events in Amplitude is straightforward. Whether it’s a simple event or one with additional properties, the SDK facilitates this process.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import { track } from '@amplitude/analytics-react-native' \\n \\n// Track a basic event \\ntrack('Button Clicked') \\n \\n// Track events with additional properties \\nconst eventProperties = { \\n buttonColor: 'blue', \\n}; \\ntrack('Button Clicked', eventProperties)\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"User Properties\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Amplitude also allowsAmplitude also allows setting user properties for more detailed user insights. The Identify method is used for this purpose.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import { identify, Identify } from '@amplitude/analytics-react-native' \\n \\nconst identifyObj = new Identify() \\n \\nidentifyObj.set('membership', data.membership) \\n \\nidentify(identifyObj) \\n \\n//For short: \\n \\nidentify(identifyObj.set('membership', data.membership))\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Event Properties vs. User Properties\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Event Properties: Sent with \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"track\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", these are exclusive to each specific event. For example, in a article opening event, we might send the article's categorie as an event property.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"User Properties: Sent with \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"identify\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", these properties follow the user across all their sessions, helping to identify consistent characteristics or states of the user.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Understanding these differences is key to how Amplitude categorizes and utilizes the collected data for meaningful analysis and user segmentation. For example, event properties can help identify which articles are most popular among users, while user properties can aid in understanding preferences of users in meaningfull decisions for the app bussines logic.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Maximizing Mobile App Potential with Amplitude and React Native 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Throughout this exploration, we’ve uncovered the capabilities of Amplitude integrated within a React Native environment. From basic setup to intricate event and user property tracking, we’ve seen how Amplitude’s robust analytics can significantly elevate our understanding of user interactions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"By leveraging event-based analytics, we can discern not only user actions but also their underlying preferences and behaviors. This insight is invaluable for refining app features, enhancing user engagement, and making informed decisions that align with our app’s business logic.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As we continue to innovate in the mobile app domain, the integration of tools like Amplitude becomes increasingly essential. It empowers us to transform raw data into actionable insights, ultimately steering our applications towards success.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Stay connected for more insights and discussions:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Embark on your journey of mobile app enhancement with confidence!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Warm regards,\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ian Duhamel CTO at \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Devink\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/company/devink-solutions/\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><em>In the ever-evolving landscape of mobile application development, analytics play a pivotal role in shaping user experience and guiding strategic decisions. Previously, I delved into the integration of Amplitude with Next.js in a </em><a href=\"https://medium.com/javascript-in-plain-english/how-to-implement-amplitude-in-next-js-a-3-step-guide-6803c44ca862\"><em>blog</em></a><em>, highlighting how analytics can transform web applications. Now, I’m shifting my focus to mobile development, particularly React Native, to explore how Amplitude’s powerful analytics can be leveraged in this domain.</em></p><p><em>React Native, a popular framework for building mobile applications, provides a unique set of challenges and opportunities for integrating analytics. In this comprehensive guide, I’ll walk you through the nuances of integrating Amplitude with React Native. We’ll cover the initial setup, event tracking, and utilizing analytics for insightful user data interpretation, drawing from my experience with Next.js and adapting these principles to the mobile environment.</em></p><p><em>Stay tuned as we embark on this journey to master Amplitude integration in React Native, enhancing our mobile applications with data-driven insights.</em></p><h3 id=\"what-makes-amplitude-special\">What Makes Amplitude Special?</h3><p>Amplitude stands out as a formidable product analytics platform, primarily due to its capacity to intricately track and comprehend user behavior. This platform is not just about tracking user data; it’s a tool that provides deep insights into user engagement, retention, and revenue generation.</p><h4 id=\"key-concepts-of-amplitude\">Key Concepts of Amplitude</h4><p>Amplitude is rooted in event-based analytics, focusing on user-product interactions to analyze behavior in real-time. Understanding its key concepts is crucial:</p><p><strong>1. Events:</strong> Actions taken by users, like pressing the “Play Song” button in a music player app.<br><strong>2.</strong> <strong>Event Properties:</strong> Details about an event, such as the music genre in the above example.<br><strong>3. Users:</strong> The individuals interacting with your product.<br><strong>4. User Properties:</strong> Attributes of users, like whether they’re on a paid or free plan.<br><strong>5. Sessions:</strong> The duration a user interacts with your app.</p><p>In essence, Amplitude’s strength lies in its ability to keep data trustworthy and secure while offering powerful analytics tools to answer critical questions about user interactions and behaviors. This capability enhances collaboration across teams, driving growth and facilitating better product development.</p><hr><h3 id=\"getting-started\">Getting Started</h3><h4 id=\"installation\">Installation</h4><p>Start by installing the Amplitude React Native SDK via NPM. This SDK is adaptable for both web and Expo projects. Ensure to also install <a href=\"http://twitter.com/react\" rel=\"noopener\"><strong>@react</strong></a><strong>-native-async-storage/async-storage</strong> for the SDK to function effectively.</p><pre><code class=\"language-bash\">npm install @amplitude/analytics-react-native \nnpm install @react-native-async-storage/async-storage</code></pre><p>For iOS, proceed to install native modules:</p><pre><code class=\"language-bash\">cd ios \npod install</code></pre><h4 id=\"sdk-initialization\">SDK Initialization</h4><p>Initialization is a critical step. You need the API key from your Amplitude project. Optionally, a user ID and configuration object can also be included. This setup allows the SDK to be utilized throughout your application.</p><pre><code class=\"language-javascript\">import { init } from '@amplitude/analytics-react-native' \n \n// Option 1: Initialize with API_KEY only \ninit(API_KEY) \n \n// Option 2: Initialize including user ID \ninit(API_KEY, 'user ID') \n \n// Option 3: Initialize with additional configuration \ninit(API_KEY, 'user ID', { \n disableCookies: true, // For web platform \n})</code></pre><h4 id=\"advanced-configuration\">Advanced Configuration</h4><p>The Amplitude SDK offers various configuration options, including batching behavior, EU data residency, and debugging levels. For instance, you can customize batch behavior with <em>flushQueueSize </em>and <em>flushIntervalMillis</em>.</p><pre><code class=\"language-javascript\">import { init } from '@amplitude/analytics-react-native' \n \ninit(API_KEY, OPTIONAL_USER_ID, { \n flushQueueSize: 50, \n flushIntervalMillis: 20000, \n serverZone: 'EU', // For EU data residency \n})</code></pre><p>If you want to dig deeper on the Advanced SDK configs I let you a link to the official docs <a href=\"https://www.docs.developers.amplitude.com/data/sdks/typescript-react-native/#initialize-the-sdk\" rel=\"noopener\">here</a>.</p><h4 id=\"basic-event-tracking\">Basic Event Tracking</h4><p>Tracking events in Amplitude is straightforward. Whether it’s a simple event or one with additional properties, the SDK facilitates this process.</p><pre><code class=\"language-javascript\">import { track } from '@amplitude/analytics-react-native' \n \n// Track a basic event \ntrack('Button Clicked') \n \n// Track events with additional properties \nconst eventProperties = { \n buttonColor: 'blue', \n}; \ntrack('Button Clicked', eventProperties)</code></pre><h4 id=\"user-properties\">User Properties</h4><p>Amplitude also allowsAmplitude also allows setting user properties for more detailed user insights. The Identify method is used for this purpose.</p><pre><code class=\"language-javascript\">import { identify, Identify } from '@amplitude/analytics-react-native' \n \nconst identifyObj = new Identify() \n \nidentifyObj.set('membership', data.membership) \n \nidentify(identifyObj) \n \n//For short: \n \nidentify(identifyObj.set('membership', data.membership))</code></pre><h4 id=\"event-properties-vs-user-properties\">Event Properties vs. User Properties</h4><ul><li>Event Properties: Sent with <code>track</code>, these are exclusive to each specific event. For example, in a article opening event, we might send the article's categorie as an event property.</li><li>User Properties: Sent with <code>identify</code>, these properties follow the user across all their sessions, helping to identify consistent characteristics or states of the user.</li></ul><p>Understanding these differences is key to how Amplitude categorizes and utilizes the collected data for meaningful analysis and user segmentation. For example, event properties can help identify which articles are most popular among users, while user properties can aid in understanding preferences of users in meaningfull decisions for the app bussines logic.</p><hr><h3 id=\"maximizing-mobile-app-potential-with-amplitude-and-react-native-%F0%9F%9A%80\">Maximizing Mobile App Potential with Amplitude and React Native 🚀</h3><p>Throughout this exploration, we’ve uncovered the capabilities of Amplitude integrated within a React Native environment. From basic setup to intricate event and user property tracking, we’ve seen how Amplitude’s robust analytics can significantly elevate our understanding of user interactions.</p><p>By leveraging event-based analytics, we can discern not only user actions but also their underlying preferences and behaviors. This insight is invaluable for refining app features, enhancing user engagement, and making informed decisions that align with our app’s business logic.</p><p>As we continue to innovate in the mobile app domain, the integration of tools like Amplitude becomes increasingly essential. It empowers us to transform raw data into actionable insights, ultimately steering our applications towards success.</p><p>Stay connected for more insights and discussions:</p><p>- <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\">LinkedIn</a><br>- <a href=\"https://github.com/Ianduha13\" rel=\"noopener\">GitHub</a></p><p>Embark on your journey of mobile app enhancement with confidence!</p><p>Warm regards,<br>Ian Duhamel CTO at <a href=\"https://www.linkedin.com/company/devink-solutions/\" rel=\"noopener\">Devink</a> 🚀</p>",
            "comment_id": "cb757722d5d4",
            "plaintext": "In the ever-evolving landscape of mobile application development, analytics play a pivotal role in shaping user experience and guiding strategic decisions. Previously, I delved into the integration of Amplitude with Next.js in a blog, highlighting how analytics can transform web applications. Now, I’m shifting my focus to mobile development, particularly React Native, to explore how Amplitude’s powerful analytics can be leveraged in this domain.\n\nReact Native, a popular framework for building mobile applications, provides a unique set of challenges and opportunities for integrating analytics. In this comprehensive guide, I’ll walk you through the nuances of integrating Amplitude with React Native. We’ll cover the initial setup, event tracking, and utilizing analytics for insightful user data interpretation, drawing from my experience with Next.js and adapting these principles to the mobile environment.\n\nStay tuned as we embark on this journey to master Amplitude integration in React Native, enhancing our mobile applications with data-driven insights.\n\n\nWhat Makes Amplitude Special?\n\nAmplitude stands out as a formidable product analytics platform, primarily due to its capacity to intricately track and comprehend user behavior. This platform is not just about tracking user data; it’s a tool that provides deep insights into user engagement, retention, and revenue generation.\n\nKey Concepts of Amplitude\n\nAmplitude is rooted in event-based analytics, focusing on user-product interactions to analyze behavior in real-time. Understanding its key concepts is crucial:\n\n1. Events: Actions taken by users, like pressing the “Play Song” button in a music player app.\n2. Event Properties: Details about an event, such as the music genre in the above example.\n3. Users: The individuals interacting with your product.\n4. User Properties: Attributes of users, like whether they’re on a paid or free plan.\n5. Sessions: The duration a user interacts with your app.\n\nIn essence, Amplitude’s strength lies in its ability to keep data trustworthy and secure while offering powerful analytics tools to answer critical questions about user interactions and behaviors. This capability enhances collaboration across teams, driving growth and facilitating better product development.\n\n\nGetting Started\n\nInstallation\n\nStart by installing the Amplitude React Native SDK via NPM. This SDK is adaptable for both web and Expo projects. Ensure to also install @react-native-async-storage/async-storage for the SDK to function effectively.\n\nnpm install @amplitude/analytics-react-native \nnpm install @react-native-async-storage/async-storage\n\nFor iOS, proceed to install native modules:\n\ncd ios \npod install\n\nSDK Initialization\n\nInitialization is a critical step. You need the API key from your Amplitude project. Optionally, a user ID and configuration object can also be included. This setup allows the SDK to be utilized throughout your application.\n\nimport { init } from '@amplitude/analytics-react-native' \n \n// Option 1: Initialize with API_KEY only \ninit(API_KEY) \n \n// Option 2: Initialize including user ID \ninit(API_KEY, 'user ID') \n \n// Option 3: Initialize with additional configuration \ninit(API_KEY, 'user ID', { \n disableCookies: true, // For web platform \n})\n\nAdvanced Configuration\n\nThe Amplitude SDK offers various configuration options, including batching behavior, EU data residency, and debugging levels. For instance, you can customize batch behavior with flushQueueSize and flushIntervalMillis.\n\nimport { init } from '@amplitude/analytics-react-native' \n \ninit(API_KEY, OPTIONAL_USER_ID, { \n flushQueueSize: 50, \n flushIntervalMillis: 20000, \n serverZone: 'EU', // For EU data residency \n})\n\nIf you want to dig deeper on the Advanced SDK configs I let you a link to the official docs here.\n\nBasic Event Tracking\n\nTracking events in Amplitude is straightforward. Whether it’s a simple event or one with additional properties, the SDK facilitates this process.\n\nimport { track } from '@amplitude/analytics-react-native' \n \n// Track a basic event \ntrack('Button Clicked') \n \n// Track events with additional properties \nconst eventProperties = { \n buttonColor: 'blue', \n}; \ntrack('Button Clicked', eventProperties)\n\nUser Properties\n\nAmplitude also allowsAmplitude also allows setting user properties for more detailed user insights. The Identify method is used for this purpose.\n\nimport { identify, Identify } from '@amplitude/analytics-react-native' \n \nconst identifyObj = new Identify() \n \nidentifyObj.set('membership', data.membership) \n \nidentify(identifyObj) \n \n//For short: \n \nidentify(identifyObj.set('membership', data.membership))\n\nEvent Properties vs. User Properties\n\n * Event Properties: Sent with track, these are exclusive to each specific event. For example, in a article opening event, we might send the article's categorie as an event property.\n * User Properties: Sent with identify, these properties follow the user across all their sessions, helping to identify consistent characteristics or states of the user.\n\nUnderstanding these differences is key to how Amplitude categorizes and utilizes the collected data for meaningful analysis and user segmentation. For example, event properties can help identify which articles are most popular among users, while user properties can aid in understanding preferences of users in meaningfull decisions for the app bussines logic.\n\n\nMaximizing Mobile App Potential with Amplitude and React Native 🚀\n\nThroughout this exploration, we’ve uncovered the capabilities of Amplitude integrated within a React Native environment. From basic setup to intricate event and user property tracking, we’ve seen how Amplitude’s robust analytics can significantly elevate our understanding of user interactions.\n\nBy leveraging event-based analytics, we can discern not only user actions but also their underlying preferences and behaviors. This insight is invaluable for refining app features, enhancing user engagement, and making informed decisions that align with our app’s business logic.\n\nAs we continue to innovate in the mobile app domain, the integration of tools like Amplitude becomes increasingly essential. It empowers us to transform raw data into actionable insights, ultimately steering our applications towards success.\n\nStay connected for more insights and discussions:\n\n- LinkedIn\n- GitHub\n\nEmbark on your journey of mobile app enhancement with confidence!\n\nWarm regards,\nIan Duhamel CTO at Devink 🚀",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-rlgvovyrdcwd1jty0z7u1a.png",
            "featured": 1,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-01-09T08:16:45.000Z",
            "updated_at": "2024-03-22T20:52:08.000Z",
            "published_at": "2024-01-09T08:16:45.000Z",
            "custom_excerpt": "In the ever-evolving landscape of mobile application development, analytics play a pivotal role in shaping user experience and guiding…",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdc9",
            "uuid": "6d708929-79e9-462e-a570-c0330b3681dd",
            "title": "Understanding Currying in Functional Programming",
            "slug": "currying-in-functional-programming",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Understanding Currying in Javascript Functional Programming\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Hello, JavaScript enthusiasts! Today, we’re diving into a fundamental concept of functional programming: \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"currying\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". This technique, often underappreciated, is akin to acquiring a new gadget that you can’t live without once you’ve started using it. Think of it like the transformation from landlines to smartphones. In the realm of programming, especially for those of us inclined towards JavaScript and functional paradigms, currying is such a transformation.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"What is Currying?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Currying is a process in functional programming where a function, instead of taking multiple arguments at once, takes the first one and returns a new function that takes the second one, and so on. This chain continues until all arguments are handled.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Imagine a simple addition function \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"add(x, y)\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" which takes two arguments. When curried, this function transforms into \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"add(x)(y)\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", where \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"add(x)\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" returns a function that takes \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"y\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" as an argument.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"A Practical Example\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s consider a practical scenario. Suppose we have:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const add = x => y => x + y \\nconst increment = add(1) \\nconst addTen = add(10)\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"increment\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"addTen\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" are both functions derived from \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"add\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" but are pre-loaded with an argument. \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"increment(2)\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" will give us 3, and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"addTen(2)\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" will give us 12. These functions remember their first argument due to JavaScript's closure feature.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Why Currying?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Why adopt this approach? Currying’s charm lies in its ability to spawn specialized functions from more generic ones. It’s like owning a multi-tool in your codebase, each feature uniquely tailored for specific tasks.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Currying fosters code reusability and functional composition, crafting functions that are succinct, clear, and maintainable, and reducing redundant code.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s explore another example a little bit more complex:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const curry = (fn) => (arg1) => (arg2) => fn(arg1, arg2); \\n  \\nconst join = curry((separator, array) => array.join(separator));  \\nconst toUpperCase = (str) => str.toUpperCase(); \\n  \\nconst joinWords = join(\\\" \\\");  \\nconst loudWords = joinWords([\\\"hello\\\", \\\"world\\\"].map(toUpperCase));  \\n// Returns: \\\"HELLO WORLD\\\"\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"join\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is a curried function that first takes a separator and then an array. It returns a string with the array elements joined by the separator. The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"toUpperCase\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function is applied to each element of the array before joining, demonstrating how curried functions can be used for more complex operations.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Advantages in JavaScript\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In JavaScript, currying transforms the way we handle functions and data. It aligns with the principles of functional programming, promoting immutability and side-effect-free functions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Code Clarity\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Curried functions are often more readable and explicit.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Modularity\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": You can create small, reusable, and composable functions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Lazy Evaluation\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Currying enables partial function application, allowing for deferred execution.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"number\",\"start\":1,\"tag\":\"ol\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Conclusion\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Currying is more than just a programming trick, it’s a fundamental shift in how we approach functions and arguments. It’s a powerful tool in your functional programming toolkit, making your code more expressive, modular, and maintainable.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"It’s important to recognize that the essence of currying extends beyond JavaScript. It’s a universal principle in programming, applicable across various languages. I only used JavaScript because I’m really used to it, but I encourage you to use this concept every time you can.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Feel free to reach out if you have questions or want to discuss more about JavaScript and functional programming!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Keep exploring and happy coding! 🚀👨‍💻\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<h3 id=\"understanding-currying-in-javascript-functional-programming\">Understanding Currying in Javascript Functional Programming</h3><p>Hello, JavaScript enthusiasts! Today, we’re diving into a fundamental concept of functional programming: <strong>currying</strong>. This technique, often underappreciated, is akin to acquiring a new gadget that you can’t live without once you’ve started using it. Think of it like the transformation from landlines to smartphones. In the realm of programming, especially for those of us inclined towards JavaScript and functional paradigms, currying is such a transformation.</p><h3 id=\"what-is-currying\">What is Currying?</h3><p>Currying is a process in functional programming where a function, instead of taking multiple arguments at once, takes the first one and returns a new function that takes the second one, and so on. This chain continues until all arguments are handled.</p><p>Imagine a simple addition function <code>add(x, y)</code> which takes two arguments. When curried, this function transforms into <code>add(x)(y)</code>, where <code>add(x)</code> returns a function that takes <code>y</code> as an argument.</p><h3 id=\"a-practical-example\">A Practical Example</h3><p>Let’s consider a practical scenario. Suppose we have:</p><pre><code class=\"language-javascript\">const add = x =&gt; y =&gt; x + y \nconst increment = add(1) \nconst addTen = add(10)</code></pre><p>Here, <code>increment</code> and <code>addTen</code> are both functions derived from <code>add</code> but are pre-loaded with an argument. <code>increment(2)</code> will give us 3, and <code>addTen(2)</code> will give us 12. These functions remember their first argument due to JavaScript's closure feature.</p><h3 id=\"why-currying\">Why Currying?</h3><p>Why adopt this approach? Currying’s charm lies in its ability to spawn specialized functions from more generic ones. It’s like owning a multi-tool in your codebase, each feature uniquely tailored for specific tasks.</p><p>Currying fosters code reusability and functional composition, crafting functions that are succinct, clear, and maintainable, and reducing redundant code.</p><p>Let’s explore another example a little bit more complex:</p><pre><code class=\"language-javascript\">const curry = (fn) =&gt; (arg1) =&gt; (arg2) =&gt; fn(arg1, arg2); \n  \nconst join = curry((separator, array) =&gt; array.join(separator));  \nconst toUpperCase = (str) =&gt; str.toUpperCase(); \n  \nconst joinWords = join(\" \");  \nconst loudWords = joinWords([\"hello\", \"world\"].map(toUpperCase));  \n// Returns: \"HELLO WORLD\"</code></pre><p>In this example, <code>join</code> is a curried function that first takes a separator and then an array. It returns a string with the array elements joined by the separator. The <code>toUpperCase</code> function is applied to each element of the array before joining, demonstrating how curried functions can be used for more complex operations.</p><h3 id=\"advantages-in-javascript\">Advantages in JavaScript</h3><p>In JavaScript, currying transforms the way we handle functions and data. It aligns with the principles of functional programming, promoting immutability and side-effect-free functions.</p><ol><li><strong>Code Clarity</strong>: Curried functions are often more readable and explicit.</li><li><strong>Modularity</strong>: You can create small, reusable, and composable functions.</li><li><strong>Lazy Evaluation</strong>: Currying enables partial function application, allowing for deferred execution.</li></ol><h3 id=\"conclusion\">Conclusion</h3><p>Currying is more than just a programming trick, it’s a fundamental shift in how we approach functions and arguments. It’s a powerful tool in your functional programming toolkit, making your code more expressive, modular, and maintainable.</p><p>It’s important to recognize that the essence of currying extends beyond JavaScript. It’s a universal principle in programming, applicable across various languages. I only used JavaScript because I’m really used to it, but I encourage you to use this concept every time you can.</p><p>Feel free to reach out if you have questions or want to discuss more about JavaScript and functional programming!</p><ul><li>Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a></li><li>Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></li></ul><p>Keep exploring and happy coding! 🚀👨‍💻</p>",
            "comment_id": "551c5b86844e",
            "plaintext": "Understanding Currying in Javascript Functional Programming\n\nHello, JavaScript enthusiasts! Today, we’re diving into a fundamental concept of functional programming: currying. This technique, often underappreciated, is akin to acquiring a new gadget that you can’t live without once you’ve started using it. Think of it like the transformation from landlines to smartphones. In the realm of programming, especially for those of us inclined towards JavaScript and functional paradigms, currying is such a transformation.\n\n\nWhat is Currying?\n\nCurrying is a process in functional programming where a function, instead of taking multiple arguments at once, takes the first one and returns a new function that takes the second one, and so on. This chain continues until all arguments are handled.\n\nImagine a simple addition function add(x, y) which takes two arguments. When curried, this function transforms into add(x)(y), where add(x) returns a function that takes y as an argument.\n\n\nA Practical Example\n\nLet’s consider a practical scenario. Suppose we have:\n\nconst add = x => y => x + y \nconst increment = add(1) \nconst addTen = add(10)\n\nHere, increment and addTen are both functions derived from add but are pre-loaded with an argument. increment(2) will give us 3, and addTen(2) will give us 12. These functions remember their first argument due to JavaScript's closure feature.\n\n\nWhy Currying?\n\nWhy adopt this approach? Currying’s charm lies in its ability to spawn specialized functions from more generic ones. It’s like owning a multi-tool in your codebase, each feature uniquely tailored for specific tasks.\n\nCurrying fosters code reusability and functional composition, crafting functions that are succinct, clear, and maintainable, and reducing redundant code.\n\nLet’s explore another example a little bit more complex:\n\nconst curry = (fn) => (arg1) => (arg2) => fn(arg1, arg2); \n  \nconst join = curry((separator, array) => array.join(separator));  \nconst toUpperCase = (str) => str.toUpperCase(); \n  \nconst joinWords = join(\" \");  \nconst loudWords = joinWords([\"hello\", \"world\"].map(toUpperCase));  \n// Returns: \"HELLO WORLD\"\n\nIn this example, join is a curried function that first takes a separator and then an array. It returns a string with the array elements joined by the separator. The toUpperCase function is applied to each element of the array before joining, demonstrating how curried functions can be used for more complex operations.\n\n\nAdvantages in JavaScript\n\nIn JavaScript, currying transforms the way we handle functions and data. It aligns with the principles of functional programming, promoting immutability and side-effect-free functions.\n\n 1. Code Clarity: Curried functions are often more readable and explicit.\n 2. Modularity: You can create small, reusable, and composable functions.\n 3. Lazy Evaluation: Currying enables partial function application, allowing for deferred execution.\n\n\nConclusion\n\nCurrying is more than just a programming trick, it’s a fundamental shift in how we approach functions and arguments. It’s a powerful tool in your functional programming toolkit, making your code more expressive, modular, and maintainable.\n\nIt’s important to recognize that the essence of currying extends beyond JavaScript. It’s a universal principle in programming, applicable across various languages. I only used JavaScript because I’m really used to it, but I encourage you to use this concept every time you can.\n\nFeel free to reach out if you have questions or want to discuss more about JavaScript and functional programming!\n\n * Connect with me on LinkedIn\n * Explore my projects on GitHub\n\nKeep exploring and happy coding! 🚀👨‍💻",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-eo6w9e9kceyizfxkwq-pva.png",
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-11-23T23:00:51.000Z",
            "updated_at": "2024-03-22T18:59:11.000Z",
            "published_at": "2023-11-23T23:00:51.000Z",
            "custom_excerpt": "Hello, JavaScript enthusiasts! Today, we’re diving into a fundamental concept of functional programming: currying.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdca",
            "uuid": "7c3bd4f0-0651-4227-9cfa-dfaac33a0a1f",
            "title": "Elevate Your JavaScript Game with Higher-Order Functions 🐉",
            "slug": "javascript-higher-order-functions",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Greetings developers! In our ever-evolving JavaScript world, one thing that remains constant is the need to effectively manipulate and utilize arrays. Thankfully, JavaScript offers us a wealth of higher-order functions that simplify this task. Today, we’ll dive deep into this topic, exploring the might of map, filter, find, sort, and the star of the show: reduce.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Magic of Higher-Order Functions\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Before we dive into specifics, let’s establish a common understanding of what we mean by \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"higher-order functions\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". These are functions that take one or more functions as arguments, or return a function as a result. Thanks to JavaScript treating functions as first-class citizens, we can assign them to variables, use them as object properties, or pass them as arguments to other functions. This enables powerful and flexible ways to handle data in our applications. Let’s see an example:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"function greet(name) { \\n    return `Hello, ${name}!` \\n} \\n \\nfunction loudGreeting(greeting, name) { \\n    return greeting(name).toUpperCase() + '!!!' \\n} \\n \\nconsole.log(loudGreeting(greet, 'Readers'))  \\n// Outputs: \\\"HELLO, READERS!!!!\\\"\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"loudGreeting\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is a higher-order function because it takes another function (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"greet\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\") as an argument.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"greet\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function is responsible for creating a simple greeting message. The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"loudGreeting\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function then takes this \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"greet\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function, applies it, and further modifies the output to make the greeting loud (converting the message to upper case and appended with '!!!').\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Higher-order functions provide a powerful way to abstract functionality and create reusable and composable pieces of code.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"map(): Transforming Elements, One by One\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"map()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" method comes to the rescue when you need to create a new array by applying a function to every element of an existing one.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [1, 2, 3, 4, 5] \\nconst squares = numbers.map(num => num ** 2) \\nconsole.log(squares)// [1, 4, 9, 16, 25]\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"map()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" applies the squaring function to every element of the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"numbers\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array and results in a new \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"squares\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array. The original array remains unaltered.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"filter(): Hand-Picking the Elements You Need\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"When you need to sift through an array and pick out certain elements that satisfy a specific condition, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"filter()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is the method you want.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here’s how you can use \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"filter()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\":\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [1, 2, 3, 4, 5] \\nconst evens = numbers.filter(num => num % 2 === 0) \\nconsole.log(evens) // [2, 4]\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this case, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"filter()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" goes through each element of the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"numbers\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array and forms a new \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"evens\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array with elements that pass the condition specified (numbers that are even).\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"find(): Seeking Out the First Match\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"When you need to find the first element in an array that matches a specific condition, turn to \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"find():\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [1, 2, 3, 4, 5] \\nconst firstEven = numbers.find(num => num % 2 === 0) \\nconsole.log(firstEven) // 2\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"find()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" returns the first element from the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"numbers\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array that satisfies the condition.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sort(): Putting Everything in Order\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"When it comes to arranging the elements of an array in a specific order, the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sort()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function is your best friend.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [5, 2, 1, 4, 3] \\nnumbers.sort() \\nconsole.log(numbers) // [1, 2, 3, 4, 5]\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"To sort numbers in descending order, you can pass a compare function to \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sort()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\":\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [5, 2, 1, 4, 3] \\nnumbers.sort((a, b) => b - a) \\nconsole.log(numbers) // [5, 4, 3, 2, 1]\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Each of these higher-order functions plays a crucial role in everyday JavaScript programming. However, there’s one more function that, while slightly more complex, offers a level of flexibility and power that makes it stand out: the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function. Let's dive deeper into this next!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce(): The Jewel of the HOF’s\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"With its ability to take an array and ‘reduce’ it to a single value, the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function holds a unique and potent position among JavaScript's higher-order functions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"It’s here that we encounter an important concept: the accumulator. An accumulator is essentially a value that is remembered across iterations. With each pass through our array, the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function takes the current array element and combines it with the accumulator in a way we define, eventually resulting in a single, 'accumulated' output value.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This sound pretty complicated right? But with a few examples you’re going to love it 😆 :\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const numbers = [1, 2, 3, 4, 5] \\nconst sum = numbers.reduce((accumulator, currentValue) => accumulator +  \\ncurrentValue, 0) \\nconsole.log(sum) // 15\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this case, the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function is taking an array of numbers and 'reducing' it to their sum. With each iteration, the current array element (the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"currentValue\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\") is added to the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"accumulator\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" (which starts at \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"0\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", as we've specified).\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The beauty of \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is its flexibility. It's not limited to numerical operations. Let's say we have an array of strings and we want to concatenate them into a single string:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const words = ['JavaScript', 'is', 'awesome'] \\nconst sentence = words.reduce((accumulator, currentWord) =>  \\naccumulator + ' ' + currentWord, '') \\nconsole.log(sentence)// 'JavaScript is awesome'\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"By using \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", we're able to 'reduce' our array of words to a single string.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The power of \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" goes beyond simple mathematical operations and concatenation. It allows us to craft more complex scenarios such as transforming our array into a more sophisticated data structure like an object too:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const pets = ['cat', 'dog', 'fish', 'cat', 'dog', 'dog'] \\nconst petCount = pets.reduce((count, pet) => { \\n  count[pet] = (count[pet] || 0) + 1 \\n  return count \\n}, {}) \\nconsole.log(petCount) // { cat: 2, dog: 3, fish: 1 }\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, we’re reducing our \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"pets\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" array into an object where the keys are the pet names, and the values are the counts of each pet in the array. The accumulator (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"count\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\") is an empty object \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"{}\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", and with each iteration, we're incrementing the corresponding pet's count or initializing it to \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"1\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" if it doesn't exist yet.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"And i can continue all day giving more and more examples of different usages of reduce 🤯\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Accumulator: The Heart of Reduce\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"One of the keys to understanding \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is giving special attention to the concept of the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"accumulator\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". It's not just a variable but the very heart of \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". The accumulator remembers its value across each iteration in the array, serving as the cumulative value up to the current point.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Initially, the accumulator is the value you provide as \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"'s second argument. Then, for each element in the array, the accumulator takes on the value returned by your callback function. By the end of the iteration, the accumulator becomes the single resulting value.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This makes \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"reduce()\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" incredibly versatile. And you can’t even imagine the amount of code lines it saves us 😏\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I encourage you to get hands-on with these methods, play around with them, and unlock the immense potential they offer.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s continue exploring the vast universe of coding together. Happy coding! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><em>Greetings developers! In our ever-evolving JavaScript world, one thing that remains constant is the need to effectively manipulate and utilize arrays. Thankfully, JavaScript offers us a wealth of higher-order functions that simplify this task. Today, we’ll dive deep into this topic, exploring the might of map, filter, find, sort, and the star of the show: reduce.</em></p><h3 id=\"the-magic-of-higher-order-functions\">The Magic of Higher-Order Functions</h3><p>Before we dive into specifics, let’s establish a common understanding of what we mean by <strong>higher-order functions</strong>. These are functions that take one or more functions as arguments, or return a function as a result. Thanks to JavaScript treating functions as first-class citizens, we can assign them to variables, use them as object properties, or pass them as arguments to other functions. This enables powerful and flexible ways to handle data in our applications. Let’s see an example:</p><pre><code class=\"language-javascript\">function greet(name) { \n    return `Hello, ${name}!` \n} \n \nfunction loudGreeting(greeting, name) { \n    return greeting(name).toUpperCase() + '!!!' \n} \n \nconsole.log(loudGreeting(greet, 'Readers'))  \n// Outputs: \"HELLO, READERS!!!!\"</code></pre><p>In this example, <code>loudGreeting</code> is a higher-order function because it takes another function (<code>greet</code>) as an argument.</p><p>The <code>greet</code> function is responsible for creating a simple greeting message. The <code>loudGreeting</code> function then takes this <code>greet</code> function, applies it, and further modifies the output to make the greeting loud (converting the message to upper case and appended with '!!!').</p><p>Higher-order functions provide a powerful way to abstract functionality and create reusable and composable pieces of code.</p><h3 id=\"map-transforming-elements-one-by-one\">map(): Transforming Elements, One by One</h3><p>The <code>map()</code> method comes to the rescue when you need to create a new array by applying a function to every element of an existing one.</p><pre><code class=\"language-javascript\">const numbers = [1, 2, 3, 4, 5] \nconst squares = numbers.map(num =&gt; num ** 2) \nconsole.log(squares)// [1, 4, 9, 16, 25]</code></pre><p>In this example, <code>map()</code> applies the squaring function to every element of the <code>numbers</code> array and results in a new <code>squares</code> array. The original array remains unaltered.</p><h3 id=\"filter-hand-picking-the-elements-you-need\">filter(): Hand-Picking the Elements You Need</h3><p>When you need to sift through an array and pick out certain elements that satisfy a specific condition, <code>filter()</code> is the method you want.</p><p>Here’s how you can use <code>filter()</code>:</p><pre><code class=\"language-javascript\">const numbers = [1, 2, 3, 4, 5] \nconst evens = numbers.filter(num =&gt; num % 2 === 0) \nconsole.log(evens) // [2, 4]</code></pre><p>In this case, <code>filter()</code> goes through each element of the <code>numbers</code> array and forms a new <code>evens</code> array with elements that pass the condition specified (numbers that are even).</p><h3 id=\"find-seeking-out-the-first-match\">find(): Seeking Out the First Match</h3><p>When you need to find the first element in an array that matches a specific condition, turn to <code>find():</code></p><pre><code class=\"language-javascript\">const numbers = [1, 2, 3, 4, 5] \nconst firstEven = numbers.find(num =&gt; num % 2 === 0) \nconsole.log(firstEven) // 2</code></pre><p>In this example, <code>find()</code> returns the first element from the <code>numbers</code> array that satisfies the condition.</p><h3 id=\"sort-putting-everything-in-order\">sort(): Putting Everything in Order</h3><p>When it comes to arranging the elements of an array in a specific order, the <code>sort()</code> function is your best friend.</p><pre><code class=\"language-javascript\">const numbers = [5, 2, 1, 4, 3] \nnumbers.sort() \nconsole.log(numbers) // [1, 2, 3, 4, 5]</code></pre><p>To sort numbers in descending order, you can pass a compare function to <code>sort()</code>:</p><pre><code class=\"language-javascript\">const numbers = [5, 2, 1, 4, 3] \nnumbers.sort((a, b) =&gt; b - a) \nconsole.log(numbers) // [5, 4, 3, 2, 1]</code></pre><p>Each of these higher-order functions plays a crucial role in everyday JavaScript programming. However, there’s one more function that, while slightly more complex, offers a level of flexibility and power that makes it stand out: the <code>reduce()</code> function. Let's dive deeper into this next!</p><h3 id=\"reduce-the-jewel-of-the-hof%E2%80%99s\">reduce(): The Jewel of the HOF’s</h3><p>With its ability to take an array and ‘reduce’ it to a single value, the <code>reduce()</code> function holds a unique and potent position among JavaScript's higher-order functions.</p><p>It’s here that we encounter an important concept: the accumulator. An accumulator is essentially a value that is remembered across iterations. With each pass through our array, the <code>reduce()</code> function takes the current array element and combines it with the accumulator in a way we define, eventually resulting in a single, 'accumulated' output value.</p><p>This sound pretty complicated right? But with a few examples you’re going to love it 😆 :</p><pre><code class=\"language-javascript\">const numbers = [1, 2, 3, 4, 5] \nconst sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator +  \ncurrentValue, 0) \nconsole.log(sum) // 15</code></pre><p>In this case, the <code>reduce()</code> function is taking an array of numbers and 'reducing' it to their sum. With each iteration, the current array element (the <code>currentValue</code>) is added to the <code>accumulator</code> (which starts at <code>0</code>, as we've specified).</p><p>The beauty of <code>reduce()</code> is its flexibility. It's not limited to numerical operations. Let's say we have an array of strings and we want to concatenate them into a single string:</p><pre><code class=\"language-javascript\">const words = ['JavaScript', 'is', 'awesome'] \nconst sentence = words.reduce((accumulator, currentWord) =&gt;  \naccumulator + ' ' + currentWord, '') \nconsole.log(sentence)// 'JavaScript is awesome'</code></pre><p>By using <code>reduce()</code>, we're able to 'reduce' our array of words to a single string.</p><p>The power of <code>reduce()</code> goes beyond simple mathematical operations and concatenation. It allows us to craft more complex scenarios such as transforming our array into a more sophisticated data structure like an object too:</p><pre><code class=\"language-javascript\">const pets = ['cat', 'dog', 'fish', 'cat', 'dog', 'dog'] \nconst petCount = pets.reduce((count, pet) =&gt; { \n  count[pet] = (count[pet] || 0) + 1 \n  return count \n}, {}) \nconsole.log(petCount) // { cat: 2, dog: 3, fish: 1 }</code></pre><p>In this example, we’re reducing our <code>pets</code> array into an object where the keys are the pet names, and the values are the counts of each pet in the array. The accumulator (<code>count</code>) is an empty object <code>{}</code>, and with each iteration, we're incrementing the corresponding pet's count or initializing it to <code>1</code> if it doesn't exist yet.</p><p>And i can continue all day giving more and more examples of different usages of reduce 🤯</p><h3 id=\"the-accumulator-the-heart-of-reduce\">The Accumulator: The Heart of Reduce</h3><p>One of the keys to understanding <code>reduce()</code> is giving special attention to the concept of the <strong>accumulator</strong>. It's not just a variable but the very heart of <code>reduce()</code>. The accumulator remembers its value across each iteration in the array, serving as the cumulative value up to the current point.</p><p>Initially, the accumulator is the value you provide as <code>reduce()</code>'s second argument. Then, for each element in the array, the accumulator takes on the value returned by your callback function. By the end of the iteration, the accumulator becomes the single resulting value.</p><p>This makes <code>reduce()</code> incredibly versatile. And you can’t even imagine the amount of code lines it saves us 😏</p><hr><p>I encourage you to get hands-on with these methods, play around with them, and unlock the immense potential they offer.</p><p>As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:</p><ul><li>Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a></li><li>Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></li></ul><p>Let’s continue exploring the vast universe of coding together. Happy coding! 😃</p>",
            "comment_id": "ca8e29ec3fa3",
            "plaintext": "Greetings developers! In our ever-evolving JavaScript world, one thing that remains constant is the need to effectively manipulate and utilize arrays. Thankfully, JavaScript offers us a wealth of higher-order functions that simplify this task. Today, we’ll dive deep into this topic, exploring the might of map, filter, find, sort, and the star of the show: reduce.\n\n\nThe Magic of Higher-Order Functions\n\nBefore we dive into specifics, let’s establish a common understanding of what we mean by higher-order functions. These are functions that take one or more functions as arguments, or return a function as a result. Thanks to JavaScript treating functions as first-class citizens, we can assign them to variables, use them as object properties, or pass them as arguments to other functions. This enables powerful and flexible ways to handle data in our applications. Let’s see an example:\n\nfunction greet(name) { \n    return `Hello, ${name}!` \n} \n \nfunction loudGreeting(greeting, name) { \n    return greeting(name).toUpperCase() + '!!!' \n} \n \nconsole.log(loudGreeting(greet, 'Readers'))  \n// Outputs: \"HELLO, READERS!!!!\"\n\nIn this example, loudGreeting is a higher-order function because it takes another function (greet) as an argument.\n\nThe greet function is responsible for creating a simple greeting message. The loudGreeting function then takes this greet function, applies it, and further modifies the output to make the greeting loud (converting the message to upper case and appended with '!!!').\n\nHigher-order functions provide a powerful way to abstract functionality and create reusable and composable pieces of code.\n\n\nmap(): Transforming Elements, One by One\n\nThe map() method comes to the rescue when you need to create a new array by applying a function to every element of an existing one.\n\nconst numbers = [1, 2, 3, 4, 5] \nconst squares = numbers.map(num => num ** 2) \nconsole.log(squares)// [1, 4, 9, 16, 25]\n\nIn this example, map() applies the squaring function to every element of the numbers array and results in a new squares array. The original array remains unaltered.\n\n\nfilter(): Hand-Picking the Elements You Need\n\nWhen you need to sift through an array and pick out certain elements that satisfy a specific condition, filter() is the method you want.\n\nHere’s how you can use filter():\n\nconst numbers = [1, 2, 3, 4, 5] \nconst evens = numbers.filter(num => num % 2 === 0) \nconsole.log(evens) // [2, 4]\n\nIn this case, filter() goes through each element of the numbers array and forms a new evens array with elements that pass the condition specified (numbers that are even).\n\n\nfind(): Seeking Out the First Match\n\nWhen you need to find the first element in an array that matches a specific condition, turn to find():\n\nconst numbers = [1, 2, 3, 4, 5] \nconst firstEven = numbers.find(num => num % 2 === 0) \nconsole.log(firstEven) // 2\n\nIn this example, find() returns the first element from the numbers array that satisfies the condition.\n\n\nsort(): Putting Everything in Order\n\nWhen it comes to arranging the elements of an array in a specific order, the sort() function is your best friend.\n\nconst numbers = [5, 2, 1, 4, 3] \nnumbers.sort() \nconsole.log(numbers) // [1, 2, 3, 4, 5]\n\nTo sort numbers in descending order, you can pass a compare function to sort():\n\nconst numbers = [5, 2, 1, 4, 3] \nnumbers.sort((a, b) => b - a) \nconsole.log(numbers) // [5, 4, 3, 2, 1]\n\nEach of these higher-order functions plays a crucial role in everyday JavaScript programming. However, there’s one more function that, while slightly more complex, offers a level of flexibility and power that makes it stand out: the reduce() function. Let's dive deeper into this next!\n\n\nreduce(): The Jewel of the HOF’s\n\nWith its ability to take an array and ‘reduce’ it to a single value, the reduce() function holds a unique and potent position among JavaScript's higher-order functions.\n\nIt’s here that we encounter an important concept: the accumulator. An accumulator is essentially a value that is remembered across iterations. With each pass through our array, the reduce() function takes the current array element and combines it with the accumulator in a way we define, eventually resulting in a single, 'accumulated' output value.\n\nThis sound pretty complicated right? But with a few examples you’re going to love it 😆 :\n\nconst numbers = [1, 2, 3, 4, 5] \nconst sum = numbers.reduce((accumulator, currentValue) => accumulator +  \ncurrentValue, 0) \nconsole.log(sum) // 15\n\nIn this case, the reduce() function is taking an array of numbers and 'reducing' it to their sum. With each iteration, the current array element (the currentValue) is added to the accumulator (which starts at 0, as we've specified).\n\nThe beauty of reduce() is its flexibility. It's not limited to numerical operations. Let's say we have an array of strings and we want to concatenate them into a single string:\n\nconst words = ['JavaScript', 'is', 'awesome'] \nconst sentence = words.reduce((accumulator, currentWord) =>  \naccumulator + ' ' + currentWord, '') \nconsole.log(sentence)// 'JavaScript is awesome'\n\nBy using reduce(), we're able to 'reduce' our array of words to a single string.\n\nThe power of reduce() goes beyond simple mathematical operations and concatenation. It allows us to craft more complex scenarios such as transforming our array into a more sophisticated data structure like an object too:\n\nconst pets = ['cat', 'dog', 'fish', 'cat', 'dog', 'dog'] \nconst petCount = pets.reduce((count, pet) => { \n  count[pet] = (count[pet] || 0) + 1 \n  return count \n}, {}) \nconsole.log(petCount) // { cat: 2, dog: 3, fish: 1 }\n\nIn this example, we’re reducing our pets array into an object where the keys are the pet names, and the values are the counts of each pet in the array. The accumulator (count) is an empty object {}, and with each iteration, we're incrementing the corresponding pet's count or initializing it to 1 if it doesn't exist yet.\n\nAnd i can continue all day giving more and more examples of different usages of reduce 🤯\n\n\nThe Accumulator: The Heart of Reduce\n\nOne of the keys to understanding reduce() is giving special attention to the concept of the accumulator. It's not just a variable but the very heart of reduce(). The accumulator remembers its value across each iteration in the array, serving as the cumulative value up to the current point.\n\nInitially, the accumulator is the value you provide as reduce()'s second argument. Then, for each element in the array, the accumulator takes on the value returned by your callback function. By the end of the iteration, the accumulator becomes the single resulting value.\n\nThis makes reduce() incredibly versatile. And you can’t even imagine the amount of code lines it saves us 😏\n\nI encourage you to get hands-on with these methods, play around with them, and unlock the immense potential they offer.\n\nAs always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\n\n * Connect with me on LinkedIn\n * Explore my projects on GitHub\n\nLet’s continue exploring the vast universe of coding together. Happy coding! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-ltzojg0efr5s7olkadohha-jpeg.jpg",
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-07-07T13:56:52.000Z",
            "updated_at": "2024-03-22T21:02:47.000Z",
            "published_at": "2023-07-07T13:56:52.000Z",
            "custom_excerpt": "Dive into JavaScript’s superpowers with higher-order functions, featuring the versatile and powerful reduce!",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdcb",
            "uuid": "861d464d-b43f-4882-a11d-56b666f732f8",
            "title": "Navigating Modern Branching Strategies: Ship/Show/Ask vs. Gitflow",
            "slug": "gitflow-vs-ship-show-ask",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-5v3meognpxfia-cqecxkpg.png\",\"width\":725,\"height\":152,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Branching strategies have long been the backbone of efficient collaboration and streamlined release cycles in software development. As the landscape evolves, so do the strategies we employ. This article provides an in-depth comparison between the “Ship/Show/Ask” strategy and the once-popular “Gitflow” workflow.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"A Deep Dive into Gitflow\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Introduced by \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Vincent Driessen at nvie\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://nvie.com/\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", Gitflow emerged as a structured approach to branching and release management. Tailored for projects with scheduled release cycles, it provided a clear path from development to production.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Key Components of Gitflow:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Develop and Main Branches:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" These are the two primary branches. The main branch holds the official release history, while the develop branch serves as the integration point for features.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Feature Branches: \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Created for new features, branching off from \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"develop\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Release Branches:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" Prepared for a release, merging into both \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"main\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"develop\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Hotfix Branches:\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" For urgent fixes, branching directly from \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"main\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this example, two distinct features were developed between updates to the main branch. Due to a bug, we introduced a hotfix that was merged into both the develop and main branches. After the development cycle for these features was completed, we tested their compatibility in a production environment (Release). Subsequently, we merged this branch with both the main and develop branches to continue the development process.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Essence of Ship/Show/Ask\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Proposed by \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Rouan Wilsenach\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://martinfowler.com/articles/ship-show-ask.html\"},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", “Ship/Show/Ask” is a more agile approach. Tailored for continuous integration, it emphasizes rapid deployment and feedback.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This strategy promotes continuous feedback and collaboration, especially for remote teams.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ship: Direct merges without review.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-t_lvofk7gfjuyyyac52dfa.png\",\"width\":800,\"height\":240,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Adding new features with an established pattern.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Simple bug fixes.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Documentation updates.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Code improvements based on team or community feedback.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Adding new tests to prevent errors.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":5}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Show: Pull requests for review but immediate merges.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Opens a change request for CI review but merges immediately. The idea is to let the work flow forward with minimal blockages while still having spaces to discuss and improve development practices and the created code.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-vhpkt_zry8kyt165uljfia.png\",\"width\":800,\"height\":284,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ask: Opens a PR to discuss changes before merging.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h4\"},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-nltw5vtpujycqlnpzrvffq.png\",\"width\":800,\"height\":320,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The work is extensive and assistance is needed.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"There are doubts about its functionality or code quality.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"There’s uncertainty about what’s being done.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Waiting for something to happen before merging the branch.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Comparative Analysis\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Gitflow:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Pros\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Structured, clear development-to-production path, suitable for scheduled releases.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Cons\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Complexity, potential merge conflicts.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ship/Show/Ask:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Pros\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": It’s flexible, promotes continuous integration, and is driven by feedback.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Cons\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": It might be overly agile for stringent review processes.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Conclusion\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As a developer, the best experience I’ve had was with teams that employed a mixed approach. The main branch was safeguarded with bi-weekly deployments, while the Staging/Development branches were open for the Ship/Show/Ask methodology. \",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This approach is intriguing because it combines the cleanliness of git flow’s main branch with the flexibility and empowerment of Ship/Show/Ask. As a result, each development becomes significant for every developer, fostering a sense of responsibility for their individual changes.\",\"type\":\"extended-text\",\"version\":1},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener ugc nofollow noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener ugc nofollow noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s continue exploring the vast universe of coding together. Happy coding! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-5v3meognpxfia-cqecxkpg.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"725\" height=\"152\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-5v3meognpxfia-cqecxkpg.png 600w, __GHOST_URL__/content/images/2024/03/1-5v3meognpxfia-cqecxkpg.png 725w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Branching strategies have long been the backbone of efficient collaboration and streamlined release cycles in software development. As the landscape evolves, so do the strategies we employ. This article provides an in-depth comparison between the “Ship/Show/Ask” strategy and the once-popular “Gitflow” workflow.</p><h3 id=\"a-deep-dive-into-gitflow\">A Deep Dive into Gitflow</h3><p>Introduced by <a href=\"https://nvie.com/\" rel=\"noopener\">Vincent Driessen at nvie</a>, Gitflow emerged as a structured approach to branching and release management. Tailored for projects with scheduled release cycles, it provided a clear path from development to production.</p><p><strong>Key Components of Gitflow:</strong></p><ul><li><strong>Develop and Main Branches:</strong> These are the two primary branches. The main branch holds the official release history, while the develop branch serves as the integration point for features.</li><li><strong>Feature Branches: </strong>Created for new features, branching off from <code>develop</code>.</li><li><strong>Release Branches:</strong> Prepared for a release, merging into both <code>main</code> and <code>develop</code>.</li><li><strong>Hotfix Branches:</strong> For urgent fixes, branching directly from <code>main</code>.</li></ul><p><em>In this example, two distinct features were developed between updates to the main branch. Due to a bug, we introduced a hotfix that was merged into both the develop and main branches. After the development cycle for these features was completed, we tested their compatibility in a production environment (Release). Subsequently, we merged this branch with both the main and develop branches to continue the development process.</em></p><hr><h3 id=\"the-essence-of-shipshowask\">The Essence of Ship/Show/Ask</h3><p>Proposed by <a href=\"https://martinfowler.com/articles/ship-show-ask.html\" rel=\"noopener\">Rouan Wilsenach</a>, “Ship/Show/Ask” is a more agile approach. Tailored for continuous integration, it emphasizes rapid deployment and feedback.<br>This strategy promotes continuous feedback and collaboration, especially for remote teams.</p><h4 id=\"ship-direct-merges-without-review\">Ship: Direct merges without review.</h4><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-t_lvofk7gfjuyyyac52dfa.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"240\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-t_lvofk7gfjuyyyac52dfa.png 600w, __GHOST_URL__/content/images/2024/03/1-t_lvofk7gfjuyyyac52dfa.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><ul><li>Adding new features with an established pattern.</li><li>Simple bug fixes.</li><li>Documentation updates.</li><li>Code improvements based on team or community feedback.</li><li>Adding new tests to prevent errors.</li></ul><h4 id=\"show-pull-requests-for-review-but-immediate-merges\">Show: Pull requests for review but immediate merges.</h4><p>Opens a change request for CI review but merges immediately. The idea is to let the work flow forward with minimal blockages while still having spaces to discuss and improve development practices and the created code.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-vhpkt_zry8kyt165uljfia.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"284\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-vhpkt_zry8kyt165uljfia.png 600w, __GHOST_URL__/content/images/2024/03/1-vhpkt_zry8kyt165uljfia.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><h4 id=\"ask-opens-a-pr-to-discuss-changes-before-merging\">Ask: Opens a PR to discuss changes before merging.</h4><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-nltw5vtpujycqlnpzrvffq.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"320\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-nltw5vtpujycqlnpzrvffq.png 600w, __GHOST_URL__/content/images/2024/03/1-nltw5vtpujycqlnpzrvffq.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><ul><li>The work is extensive and assistance is needed.</li><li>There are doubts about its functionality or code quality.</li><li>There’s uncertainty about what’s being done.</li><li>Waiting for something to happen before merging the branch.</li></ul><hr><h3 id=\"comparative-analysis\">Comparative Analysis</h3><p>Gitflow:</p><ul><li><strong>Pros</strong>: Structured, clear development-to-production path, suitable for scheduled releases.</li><li><strong>Cons</strong>: Complexity, potential merge conflicts.</li></ul><p>Ship/Show/Ask:</p><ul><li><strong>Pros</strong>: It’s flexible, promotes continuous integration, and is driven by feedback.</li><li><strong>Cons</strong>: It might be overly agile for stringent review processes.</li></ul><hr><h3 id=\"conclusion\">Conclusion</h3><p>As a developer, the best experience I’ve had was with teams that employed a mixed approach. The main branch was safeguarded with bi-weekly deployments, while the Staging/Development branches were open for the Ship/Show/Ask methodology. <br>This approach is intriguing because it combines the cleanliness of git flow’s main branch with the flexibility and empowerment of Ship/Show/Ask. As a result, each development becomes significant for every developer, fostering a sense of responsibility for their individual changes.<br>As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:</p><ul><li>Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener ugc nofollow noopener\"><strong>LinkedIn</strong></a></li><li>Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener ugc nofollow noopener\"><strong>GitHub</strong></a></li></ul><p>Let’s continue exploring the vast universe of coding together. Happy coding! 😃</p>",
            "comment_id": "db28db4fa1b2",
            "plaintext": "Branching strategies have long been the backbone of efficient collaboration and streamlined release cycles in software development. As the landscape evolves, so do the strategies we employ. This article provides an in-depth comparison between the “Ship/Show/Ask” strategy and the once-popular “Gitflow” workflow.\n\n\nA Deep Dive into Gitflow\n\nIntroduced by Vincent Driessen at nvie, Gitflow emerged as a structured approach to branching and release management. Tailored for projects with scheduled release cycles, it provided a clear path from development to production.\n\nKey Components of Gitflow:\n\n * Develop and Main Branches: These are the two primary branches. The main branch holds the official release history, while the develop branch serves as the integration point for features.\n * Feature Branches: Created for new features, branching off from develop.\n * Release Branches: Prepared for a release, merging into both main and develop.\n * Hotfix Branches: For urgent fixes, branching directly from main.\n\nIn this example, two distinct features were developed between updates to the main branch. Due to a bug, we introduced a hotfix that was merged into both the develop and main branches. After the development cycle for these features was completed, we tested their compatibility in a production environment (Release). Subsequently, we merged this branch with both the main and develop branches to continue the development process.\n\n\nThe Essence of Ship/Show/Ask\n\nProposed by Rouan Wilsenach, “Ship/Show/Ask” is a more agile approach. Tailored for continuous integration, it emphasizes rapid deployment and feedback.\nThis strategy promotes continuous feedback and collaboration, especially for remote teams.\n\nShip: Direct merges without review.\n\n * Adding new features with an established pattern.\n * Simple bug fixes.\n * Documentation updates.\n * Code improvements based on team or community feedback.\n * Adding new tests to prevent errors.\n\nShow: Pull requests for review but immediate merges.\n\nOpens a change request for CI review but merges immediately. The idea is to let the work flow forward with minimal blockages while still having spaces to discuss and improve development practices and the created code.\n\nAsk: Opens a PR to discuss changes before merging.\n\n * The work is extensive and assistance is needed.\n * There are doubts about its functionality or code quality.\n * There’s uncertainty about what’s being done.\n * Waiting for something to happen before merging the branch.\n\n\nComparative Analysis\n\nGitflow:\n\n * Pros: Structured, clear development-to-production path, suitable for scheduled releases.\n * Cons: Complexity, potential merge conflicts.\n\nShip/Show/Ask:\n\n * Pros: It’s flexible, promotes continuous integration, and is driven by feedback.\n * Cons: It might be overly agile for stringent review processes.\n\n\nConclusion\n\nAs a developer, the best experience I’ve had was with teams that employed a mixed approach. The main branch was safeguarded with bi-weekly deployments, while the Staging/Development branches were open for the Ship/Show/Ask methodology.\nThis approach is intriguing because it combines the cleanliness of git flow’s main branch with the flexibility and empowerment of Ship/Show/Ask. As a result, each development becomes significant for every developer, fostering a sense of responsibility for their individual changes.\nAs always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\n\n * Connect with me on LinkedIn\n * Explore my projects on GitHub\n\nLet’s continue exploring the vast universe of coding together. Happy coding! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-jekixmoq3c7l9yoeu5zicg.png",
            "featured": 1,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-08-28T12:22:24.000Z",
            "updated_at": "2024-03-22T19:00:11.000Z",
            "published_at": "2023-08-28T12:22:24.000Z",
            "custom_excerpt": "Exploring branching strategies in dev: Gitflow vs. Ship/Show/Ask.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdcc",
            "uuid": "b476cdad-66fa-49ff-9e19-6e03c8530472",
            "title": "Mastering Flexbox in 2023: A Comprehensive Guide to Responsive Web Design",
            "slug": "mastering-flexbox",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Ever faced challenges when trying to align elements on a webpage? You’re not alone. It’s a common hurdle for many developers. But there’s a solution: Flexbox. Born from the CSS3 specification, Flexbox offers a more efficient and straightforward way to design layouts.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"horizontalrule\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Why Flexbox?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox simplifies web design. It allows you to organize, align, and distribute space among items in a container, even if their sizes are dynamic or unknown. It’s an essential tool that makes creating responsive and cohesive designs easier.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Kickstarting with Flexbox\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"To harness the power of Flexbox, set an element’s \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"display\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" property to \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\".container{ \\n  display: flex; \\n};\",\"language\":\"css\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"And thats it, now you’re able to use flexbox in that element as a container, and in his childrens, as items.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox Fundamentals\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox is structured around two core components: the flex container and the flex items. In the following example the container is highlighted in color blue and the items in red:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-_k7a5rs8bhliutpjwojgzg.png\",\"width\":800,\"height\":206,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox Anatomy\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox introduces a paradigm shift in layout thinking. It emphasizes a main axis and a cross axis, moving away from the conventional block and inline flow.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Main Axis\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Typically runs horizontally across the container.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Cross Axis\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Generally extends vertically.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In a horizontal layout (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-direction: row;\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"), the main axis is horizontal, and the cross axis is vertical. Conversely, in a vertical layout (\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-direction: column;\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"), the main axis is vertical, and the cross axis is horizontal.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-ooa8sgitadol8sigoxjyha.png\",\"width\":390,\"height\":320,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this column direction example its show in blue the main axis and in red the cross axis.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Positioning Items Along the Main Axis\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"justify-content\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" property dictates the alignment of items along the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"main axis\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". Here are some of its values:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-start\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items align at the container’s start.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-end\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items align at the container’s end.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"center\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items are centered.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"space-between\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Even distribution; first item at the start, last at the end.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"space-around\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Even distribution with equal spacing around items.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":5},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"space-evenly\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Uniform distribution of spacing between items and edges.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":6}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Positioning Items Along the Cross Axis\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"align-items\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" property determines the alignment of items along the cross axis:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"stretch\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items stretch to fill the container (requires no set height).\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-start\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items align at the container’s start.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-end\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items align at the container’s end.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"center\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items are centered.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"baseline\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Items align at their baseline.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":5}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flex Direction\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-direction\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" property sets the orientation of the main and cross axes:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"row\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Main axis is horizontal; cross axis is vertical.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"row-reverse\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Like row, but reversed.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"column\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Main axis is vertical; cross axis is horizontal.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":3},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"column-reverse\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Like column, but reversed.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":4}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Sizing Flex Items\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox offers robust properties to control item sizing:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-grow\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Determines how much a flex item grows relative to others.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"flex-shrink\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\": Determines how much a flex item shrinks relative to others.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Gap\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"gap\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" property in CSS is shorthand for \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"row-gap\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"column-gap\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", defining the spacing between rows and columns in grid and flex layouts.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"It has to be declared on the container, and specifies the distance between childrens.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\".container{ \\n  display: flex; \\n  gap: 2rem; \\n};\",\"language\":\"css\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"A really practical use-case: Centering a Title\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox makes centering elements both horizontally and vertically a cinch:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-3h913np3i6ty5-9p_i1y6q.png\",\"width\":800,\"height\":400,\"title\":\"\",\"alt\":\"\",\"caption\":\"\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Bonus track: A game!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I encourage you to practice what you’ve learned here using the awesome game of Flexbox Froggy, which is a free educational game.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"image\",\"version\":1,\"src\":\"__GHOST_URL__/content/images/2024/03/1-ktfki_j3dw-zxbyy-cibfg.png\",\"width\":800,\"height\":398,\"title\":\"\",\"alt\":\"\",\"caption\":\"<span style=\\\"white-space: pre-wrap;\\\">Don’t worry this is the hardest level of the game, I’m sure that if you make the previous levels, you’re going to do it with this&nbsp;too!</span>\",\"cardWidth\":\"regular\",\"href\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you play it I hope you will find it a lot of fun, because without realizing it you can probably solve problems like this with only 3 or 4 lines of flexbox code. Which are really complex layout problems to solve in a simple and fast way.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Conclusion\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Flexbox has become a fundamental tool in modern web design. It simplifies the challenges of creating layouts and enhances responsive design. As you continue to explore Flexbox, keep practicing and trying out new ideas. Don’t forget to share your work and learnings with others!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s continue exploring the vast universe of coding together. Happy coding! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><em>Ever faced challenges when trying to align elements on a webpage? You’re not alone. It’s a common hurdle for many developers. But there’s a solution: Flexbox. Born from the CSS3 specification, Flexbox offers a more efficient and straightforward way to design layouts.</em></p><hr><h3 id=\"why-flexbox\">Why Flexbox?</h3><p>Flexbox simplifies web design. It allows you to organize, align, and distribute space among items in a container, even if their sizes are dynamic or unknown. It’s an essential tool that makes creating responsive and cohesive designs easier.</p><h3 id=\"kickstarting-with-flexbox\">Kickstarting with Flexbox</h3><p>To harness the power of Flexbox, set an element’s <code>display</code> property to <code>flex</code>.</p><pre><code class=\"language-css\">.container{ \n  display: flex; \n};</code></pre><p>And thats it, now you’re able to use flexbox in that element as a container, and in his childrens, as items.</p><h3 id=\"flexbox-fundamentals\">Flexbox Fundamentals</h3><p>Flexbox is structured around two core components: the flex container and the flex items. In the following example the container is highlighted in color blue and the items in red:</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-_k7a5rs8bhliutpjwojgzg.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"206\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-_k7a5rs8bhliutpjwojgzg.png 600w, __GHOST_URL__/content/images/2024/03/1-_k7a5rs8bhliutpjwojgzg.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"flexbox-anatomy\">Flexbox Anatomy</h3><p>Flexbox introduces a paradigm shift in layout thinking. It emphasizes a main axis and a cross axis, moving away from the conventional block and inline flow.</p><ul><li><strong>Main Axis</strong>: Typically runs horizontally across the container.</li><li><strong>Cross Axis</strong>: Generally extends vertically.</li></ul><p>In a horizontal layout (<code>flex-direction: row;</code>), the main axis is horizontal, and the cross axis is vertical. Conversely, in a vertical layout (<code>flex-direction: column;</code>), the main axis is vertical, and the cross axis is horizontal.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-ooa8sgitadol8sigoxjyha.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"390\" height=\"320\"></figure><p>In this column direction example its show in blue the main axis and in red the cross axis.</p><h3 id=\"positioning-items-along-the-main-axis\">Positioning Items Along the Main Axis</h3><p>The <code>justify-content</code> property dictates the alignment of items along the <strong>main axis</strong>. Here are some of its values:</p><ul><li><strong>flex-start</strong>: Items align at the container’s start.</li><li><strong>flex-end</strong>: Items align at the container’s end.</li><li><strong>center</strong>: Items are centered.</li><li><strong>space-between</strong>: Even distribution; first item at the start, last at the end.</li><li><strong>space-around</strong>: Even distribution with equal spacing around items.</li><li><strong>space-evenly</strong>: Uniform distribution of spacing between items and edges.</li></ul><h3 id=\"positioning-items-along-the-cross-axis\">Positioning Items Along the Cross Axis</h3><p>The <code>align-items</code> property determines the alignment of items along the cross axis:</p><ul><li><strong>stretch</strong>: Items stretch to fill the container (requires no set height).</li><li><strong>flex-start</strong>: Items align at the container’s start.</li><li><strong>flex-end</strong>: Items align at the container’s end.</li><li><strong>center</strong>: Items are centered.</li><li><strong>baseline</strong>: Items align at their baseline.</li></ul><h3 id=\"flex-direction\">Flex Direction</h3><p>The <code>flex-direction</code> property sets the orientation of the main and cross axes:</p><ul><li><strong>row</strong>: Main axis is horizontal; cross axis is vertical.</li><li><strong>row-reverse</strong>: Like row, but reversed.</li><li><strong>column</strong>: Main axis is vertical; cross axis is horizontal.</li><li><strong>column-reverse</strong>: Like column, but reversed.</li></ul><h3 id=\"sizing-flex-items\">Sizing Flex Items</h3><p>Flexbox offers robust properties to control item sizing:</p><ul><li><strong>flex-grow</strong>: Determines how much a flex item grows relative to others.</li><li><strong>flex-shrink</strong>: Determines how much a flex item shrinks relative to others.</li></ul><h3 id=\"gap\">Gap</h3><p>The <code>gap</code> property in CSS is shorthand for <code>row-gap</code> and <code>column-gap</code>, defining the spacing between rows and columns in grid and flex layouts.</p><p>It has to be declared on the container, and specifies the distance between childrens.</p><pre><code class=\"language-css\">.container{ \n  display: flex; \n  gap: 2rem; \n};</code></pre><h3 id=\"a-really-practical-use-case-centering-a-title\">A really practical use-case: Centering a Title</h3><p>Flexbox makes centering elements both horizontally and vertically a cinch:</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2024/03/1-3h913np3i6ty5-9p_i1y6q.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"400\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-3h913np3i6ty5-9p_i1y6q.png 600w, __GHOST_URL__/content/images/2024/03/1-3h913np3i6ty5-9p_i1y6q.png 800w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"bonus-track-a-game\">Bonus track: A game!</h3><p>I encourage you to practice what you’ve learned here using the awesome game of Flexbox Froggy, which is a free educational game.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2024/03/1-ktfki_j3dw-zxbyy-cibfg.png\" class=\"kg-image\" alt=\"\" loading=\"lazy\" width=\"800\" height=\"398\" srcset=\"__GHOST_URL__/content/images/size/w600/2024/03/1-ktfki_j3dw-zxbyy-cibfg.png 600w, __GHOST_URL__/content/images/2024/03/1-ktfki_j3dw-zxbyy-cibfg.png 800w\" sizes=\"(min-width: 720px) 720px\"><figcaption><span style=\"white-space: pre-wrap;\">Don’t worry this is the hardest level of the game, I’m sure that if you make the previous levels, you’re going to do it with this&nbsp;too!</span></figcaption></figure><p>If you play it I hope you will find it a lot of fun, because without realizing it you can probably solve problems like this with only 3 or 4 lines of flexbox code. Which are really complex layout problems to solve in a simple and fast way.</p><h3 id=\"conclusion\">Conclusion</h3><p>Flexbox has become a fundamental tool in modern web design. It simplifies the challenges of creating layouts and enhances responsive design. As you continue to explore Flexbox, keep practicing and trying out new ideas. Don’t forget to share your work and learnings with others!</p><p>As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:</p><ul><li>Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a></li><li>Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></li></ul><p>Let’s continue exploring the vast universe of coding together. Happy coding! 😃</p>",
            "comment_id": "15ce20ec00c7",
            "plaintext": "Ever faced challenges when trying to align elements on a webpage? You’re not alone. It’s a common hurdle for many developers. But there’s a solution: Flexbox. Born from the CSS3 specification, Flexbox offers a more efficient and straightforward way to design layouts.\n\n\nWhy Flexbox?\n\nFlexbox simplifies web design. It allows you to organize, align, and distribute space among items in a container, even if their sizes are dynamic or unknown. It’s an essential tool that makes creating responsive and cohesive designs easier.\n\n\nKickstarting with Flexbox\n\nTo harness the power of Flexbox, set an element’s display property to flex.\n\n.container{ \n  display: flex; \n};\n\nAnd thats it, now you’re able to use flexbox in that element as a container, and in his childrens, as items.\n\n\nFlexbox Fundamentals\n\nFlexbox is structured around two core components: the flex container and the flex items. In the following example the container is highlighted in color blue and the items in red:\n\n\nFlexbox Anatomy\n\nFlexbox introduces a paradigm shift in layout thinking. It emphasizes a main axis and a cross axis, moving away from the conventional block and inline flow.\n\n * Main Axis: Typically runs horizontally across the container.\n * Cross Axis: Generally extends vertically.\n\nIn a horizontal layout (flex-direction: row;), the main axis is horizontal, and the cross axis is vertical. Conversely, in a vertical layout (flex-direction: column;), the main axis is vertical, and the cross axis is horizontal.\n\nIn this column direction example its show in blue the main axis and in red the cross axis.\n\n\nPositioning Items Along the Main Axis\n\nThe justify-content property dictates the alignment of items along the main axis. Here are some of its values:\n\n * flex-start: Items align at the container’s start.\n * flex-end: Items align at the container’s end.\n * center: Items are centered.\n * space-between: Even distribution; first item at the start, last at the end.\n * space-around: Even distribution with equal spacing around items.\n * space-evenly: Uniform distribution of spacing between items and edges.\n\n\nPositioning Items Along the Cross Axis\n\nThe align-items property determines the alignment of items along the cross axis:\n\n * stretch: Items stretch to fill the container (requires no set height).\n * flex-start: Items align at the container’s start.\n * flex-end: Items align at the container’s end.\n * center: Items are centered.\n * baseline: Items align at their baseline.\n\n\nFlex Direction\n\nThe flex-direction property sets the orientation of the main and cross axes:\n\n * row: Main axis is horizontal; cross axis is vertical.\n * row-reverse: Like row, but reversed.\n * column: Main axis is vertical; cross axis is horizontal.\n * column-reverse: Like column, but reversed.\n\n\nSizing Flex Items\n\nFlexbox offers robust properties to control item sizing:\n\n * flex-grow: Determines how much a flex item grows relative to others.\n * flex-shrink: Determines how much a flex item shrinks relative to others.\n\n\nGap\n\nThe gap property in CSS is shorthand for row-gap and column-gap, defining the spacing between rows and columns in grid and flex layouts.\n\nIt has to be declared on the container, and specifies the distance between childrens.\n\n.container{ \n  display: flex; \n  gap: 2rem; \n};\n\n\nA really practical use-case: Centering a Title\n\nFlexbox makes centering elements both horizontally and vertically a cinch:\n\n\nBonus track: A game!\n\nI encourage you to practice what you’ve learned here using the awesome game of Flexbox Froggy, which is a free educational game.\n\nIf you play it I hope you will find it a lot of fun, because without realizing it you can probably solve problems like this with only 3 or 4 lines of flexbox code. Which are really complex layout problems to solve in a simple and fast way.\n\n\nConclusion\n\nFlexbox has become a fundamental tool in modern web design. It simplifies the challenges of creating layouts and enhances responsive design. As you continue to explore Flexbox, keep practicing and trying out new ideas. Don’t forget to share your work and learnings with others!\n\nAs always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\n\n * Connect with me on LinkedIn\n * Explore my projects on GitHub\n\nLet’s continue exploring the vast universe of coding together. Happy coding! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-rqpj_ina7w6xvdzrtqhyka-jpeg.jpg",
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-08-27T06:34:33.000Z",
            "updated_at": "2024-03-22T19:00:59.000Z",
            "published_at": "2023-08-27T06:34:33.000Z",
            "custom_excerpt": "Ever faced challenges when trying to align elements on a webpage? You’re not alone. But there’s a…",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdcd",
            "uuid": "357e5c1c-c05f-4f56-8c27-91cba6429579",
            "title": "JavaScript Logical and Conditional Operators Explained",
            "slug": "javascript-logical-and-conditional-operators",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As JavaScript developers, we often find ourselves writing code that checks conditions and evaluates expressions. While \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"if-else\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\" statements serve this purpose well, JavaScript provides us with several other, more concise ways to deal with conditionals and logical operations: the ternary (conditional) operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"? :\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", the nullish coalescing operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"??\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", the logical AND operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"&&\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", and the logical OR operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"||\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Each of these operators brings a unique flavor to our code, helping us handle \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"null\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"undefined\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"true\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":18,\"mode\":\"normal\",\"style\":\"\",\"text\":\"false\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\", and other values in specific ways. This blog post is dedicated to providing a deeper understanding of these powerful tools in our JavaScript toolkit.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Ternary (Conditional) Operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"? :\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Starting our journey is the only ternary operator in JavaScript — the conditional operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"? :\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". This operator deals with three operands and acts as a sleek alternative to \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"if-else\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" statements, particularly when assigning variables based on a condition.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Check out its syntax:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"condition ? valueIfTrue : valueIfFalse\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now, let’s see it in action:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const isEven = (num) => num % 2 === 0 ? \\\"Even\\\" : \\\"Odd\\\" \\nconsole.log(isEven(7)) \\n// \\\"Odd\\\"\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"With the ternary operator, you can make your code cleaner and easier to read, adding a touch of elegance to your style. 😎\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Nullish Coalescing Operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"??\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Fresh from ES2020, the nullish coalescing operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"??\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is a go-to tool when you need to offer a fallback value for \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"null\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" or \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"undefined\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here’s how to use it:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"let result = value ?? defaultValue;\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"And here it is in action:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"let settings = { \\n\\tanimationDuration: 0, \\n\\tshowSplashScreen: undefined \\n} \\n \\nlet animationDuration = settings.animationDuration ?? 300 \\nlet showSplashScreen = settings.showSplashScreen ?? true \\n \\nconsole.log(animationDuration) // 0 \\nconsole.log(showSplashScreen) // true\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Got \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"undefined\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" values lurking in your code? Fear not! The nullish coalescing operator is here to the rescue! 🥳\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Logical AND Operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"&&\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The logical AND operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"&&\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is the perfect partner when you need to check if all conditions are truthy. If it encounters a falsy value, it stops and returns that value. If all it sees are truthy values, it gives you the last truthy value.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const value1 = true && “Hello” // “Hello” \\nconst value2 = 0 && “Hello” // 0\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you’re a React developer, you’ve likely seen and used this operator in conditional rendering. If not, no worries it’s never too late to join the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"&&\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" fan club! 😉\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Logical OR Operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"||\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Rounding off our operator exploration, the logical OR operator \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"||\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" helps you provide an alternative value when the original value is falsy. It delivers the first truthy value it comes across, or the last falsy value if no truthy value is found.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const value1 = true || “Hello” // true \\nconst value2 = undefined || “Hello” // “Hello”\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Tired of \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"undefined\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" sneaking up on your functions? With the logical OR operator, you can set alternative values and keep your functions running smoothly. 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Real-World Use Cases\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"These operators truly shine when used in real world coding scenarios. For instance, React developers frequently use the logical AND \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"&&\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" operator for conditional rendering. This operator allows you to decide whether or not to render a component based on certain conditions. Here’s a quick example:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"{isLoggedIn && <WelcomeMessage />}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this case, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"<WelcomeMessage />\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is only rendered if \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"isLoggedIn\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is truthy.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Also, when working with CSS frameworks like Tailwind CSS, these operators come in handy for conditional styling. For instance:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"<div className={`h-16 w-16 ${isActive ? ‘bg-green-500’ : ‘bg-red-500’}`}> \\n{/* content */} \\n</div>\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In the code snippet above, we use the ternary operator to change the background color of a div based on whether the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"isActive\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" state is truthy or falsy.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Conclusion\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"There you have it, folks! We’ve toured through some of JavaScript’s logical and conditional operators, seen them in action, and looked at some real world applications.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"These operators are indispensable tools in your JavaScript toolbox, helping you to write cleaner, more expressive, and more concise code. Whether you’re checking conditions, assigning values, or handling \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"null\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"undefined\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", these operators are there to help.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s continue exploring the vast universe of coding together. Happy coding! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><em>As JavaScript developers, we often find ourselves writing code that checks conditions and evaluates expressions. While <code>if-else</code> statements serve this purpose well, JavaScript provides us with several other, more concise ways to deal with conditionals and logical operations: the ternary (conditional) operator <code>? :</code>, the nullish coalescing operator <code>??</code>, the logical AND operator <code>&amp;&amp;</code>, and the logical OR operator <code>||</code>.</em></p><p><em>Each of these operators brings a unique flavor to our code, helping us handle <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, and other values in specific ways. This blog post is dedicated to providing a deeper understanding of these powerful tools in our JavaScript toolkit.</em></p><h3 id=\"the-ternary-conditional-operator\">The Ternary (Conditional) Operator <code>? :</code></h3><p>Starting our journey is the only ternary operator in JavaScript — the conditional operator <code>? :</code>. This operator deals with three operands and acts as a sleek alternative to <code>if-else</code> statements, particularly when assigning variables based on a condition.</p><p>Check out its syntax:</p><p><code>condition ? valueIfTrue : valueIfFalse</code></p><p>Now, let’s see it in action:</p><pre><code class=\"language-javascript\">const isEven = (num) =&gt; num % 2 === 0 ? \"Even\" : \"Odd\" \nconsole.log(isEven(7)) \n// \"Odd\"</code></pre><p>With the ternary operator, you can make your code cleaner and easier to read, adding a touch of elegance to your style. 😎</p><h3 id=\"the-nullish-coalescing-operator\">The Nullish Coalescing Operator <code>??</code></h3><p>Fresh from ES2020, the nullish coalescing operator <code>??</code> is a go-to tool when you need to offer a fallback value for <code>null</code> or <code>undefined</code>.</p><p>Here’s how to use it:</p><p><code>let result = value ?? defaultValue;</code></p><p>And here it is in action:</p><pre><code class=\"language-javascript\">let settings = { \n\tanimationDuration: 0, \n\tshowSplashScreen: undefined \n} \n \nlet animationDuration = settings.animationDuration ?? 300 \nlet showSplashScreen = settings.showSplashScreen ?? true \n \nconsole.log(animationDuration) // 0 \nconsole.log(showSplashScreen) // true</code></pre><p>Got <code>undefined</code> values lurking in your code? Fear not! The nullish coalescing operator is here to the rescue! 🥳</p><h3 id=\"the-logical-and-operator\">The Logical AND Operator <code>&amp;&amp;</code></h3><p>The logical AND operator <code>&amp;&amp;</code> is the perfect partner when you need to check if all conditions are truthy. If it encounters a falsy value, it stops and returns that value. If all it sees are truthy values, it gives you the last truthy value.</p><pre><code class=\"language-javascript\">const value1 = true &amp;&amp; “Hello” // “Hello” \nconst value2 = 0 &amp;&amp; “Hello” // 0</code></pre><p>If you’re a React developer, you’ve likely seen and used this operator in conditional rendering. If not, no worries it’s never too late to join the <code>&amp;&amp;</code> fan club! 😉</p><h3 id=\"the-logical-or-operator\">The Logical OR Operator <code>||</code></h3><p>Rounding off our operator exploration, the logical OR operator <code>||</code> helps you provide an alternative value when the original value is falsy. It delivers the first truthy value it comes across, or the last falsy value if no truthy value is found.</p><pre><code class=\"language-javascript\">const value1 = true || “Hello” // true \nconst value2 = undefined || “Hello” // “Hello”</code></pre><p>Tired of <code>undefined</code> sneaking up on your functions? With the logical OR operator, you can set alternative values and keep your functions running smoothly. 🚀</p><h3 id=\"real-world-use-cases\">Real-World Use Cases</h3><p>These operators truly shine when used in real world coding scenarios. For instance, React developers frequently use the logical AND <code>&amp;&amp;</code> operator for conditional rendering. This operator allows you to decide whether or not to render a component based on certain conditions. Here’s a quick example:</p><pre><code class=\"language-javascript\">{isLoggedIn &amp;&amp; &lt;WelcomeMessage /&gt;}</code></pre><p>In this case, <code>&lt;WelcomeMessage /&gt;</code> is only rendered if <code>isLoggedIn</code> is truthy.</p><p>Also, when working with CSS frameworks like Tailwind CSS, these operators come in handy for conditional styling. For instance:</p><pre><code class=\"language-javascript\">&lt;div className={`h-16 w-16 ${isActive ? ‘bg-green-500’ : ‘bg-red-500’}`}&gt; \n{/* content */} \n&lt;/div&gt;</code></pre><p>In the code snippet above, we use the ternary operator to change the background color of a div based on whether the <code>isActive</code> state is truthy or falsy.</p><h3 id=\"conclusion\">Conclusion</h3><p>There you have it, folks! We’ve toured through some of JavaScript’s logical and conditional operators, seen them in action, and looked at some real world applications.</p><p>These operators are indispensable tools in your JavaScript toolbox, helping you to write cleaner, more expressive, and more concise code. Whether you’re checking conditions, assigning values, or handling <code>null</code> and <code>undefined</code>, these operators are there to help.</p><p>As always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:</p><ul><li>Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a></li><li>Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></li></ul><p>Let’s continue exploring the vast universe of coding together. Happy coding! 😃</p>",
            "comment_id": "2b5427d98a8",
            "plaintext": "As JavaScript developers, we often find ourselves writing code that checks conditions and evaluates expressions. While if-else statements serve this purpose well, JavaScript provides us with several other, more concise ways to deal with conditionals and logical operations: the ternary (conditional) operator ? :, the nullish coalescing operator ??, the logical AND operator &&, and the logical OR operator ||.\n\nEach of these operators brings a unique flavor to our code, helping us handle null, undefined, true, false, and other values in specific ways. This blog post is dedicated to providing a deeper understanding of these powerful tools in our JavaScript toolkit.\n\n\nThe Ternary (Conditional) Operator ? :\n\nStarting our journey is the only ternary operator in JavaScript — the conditional operator ? :. This operator deals with three operands and acts as a sleek alternative to if-else statements, particularly when assigning variables based on a condition.\n\nCheck out its syntax:\n\ncondition ? valueIfTrue : valueIfFalse\n\nNow, let’s see it in action:\n\nconst isEven = (num) => num % 2 === 0 ? \"Even\" : \"Odd\" \nconsole.log(isEven(7)) \n// \"Odd\"\n\nWith the ternary operator, you can make your code cleaner and easier to read, adding a touch of elegance to your style. 😎\n\n\nThe Nullish Coalescing Operator ??\n\nFresh from ES2020, the nullish coalescing operator ?? is a go-to tool when you need to offer a fallback value for null or undefined.\n\nHere’s how to use it:\n\nlet result = value ?? defaultValue;\n\nAnd here it is in action:\n\nlet settings = { \n\tanimationDuration: 0, \n\tshowSplashScreen: undefined \n} \n \nlet animationDuration = settings.animationDuration ?? 300 \nlet showSplashScreen = settings.showSplashScreen ?? true \n \nconsole.log(animationDuration) // 0 \nconsole.log(showSplashScreen) // true\n\nGot undefined values lurking in your code? Fear not! The nullish coalescing operator is here to the rescue! 🥳\n\n\nThe Logical AND Operator &&\n\nThe logical AND operator && is the perfect partner when you need to check if all conditions are truthy. If it encounters a falsy value, it stops and returns that value. If all it sees are truthy values, it gives you the last truthy value.\n\nconst value1 = true && “Hello” // “Hello” \nconst value2 = 0 && “Hello” // 0\n\nIf you’re a React developer, you’ve likely seen and used this operator in conditional rendering. If not, no worries it’s never too late to join the && fan club! 😉\n\n\nThe Logical OR Operator ||\n\nRounding off our operator exploration, the logical OR operator || helps you provide an alternative value when the original value is falsy. It delivers the first truthy value it comes across, or the last falsy value if no truthy value is found.\n\nconst value1 = true || “Hello” // true \nconst value2 = undefined || “Hello” // “Hello”\n\nTired of undefined sneaking up on your functions? With the logical OR operator, you can set alternative values and keep your functions running smoothly. 🚀\n\n\nReal-World Use Cases\n\nThese operators truly shine when used in real world coding scenarios. For instance, React developers frequently use the logical AND && operator for conditional rendering. This operator allows you to decide whether or not to render a component based on certain conditions. Here’s a quick example:\n\n{isLoggedIn && <WelcomeMessage />}\n\nIn this case, <WelcomeMessage /> is only rendered if isLoggedIn is truthy.\n\nAlso, when working with CSS frameworks like Tailwind CSS, these operators come in handy for conditional styling. For instance:\n\n<div className={`h-16 w-16 ${isActive ? ‘bg-green-500’ : ‘bg-red-500’}`}> \n{/* content */} \n</div>\n\nIn the code snippet above, we use the ternary operator to change the background color of a div based on whether the isActive state is truthy or falsy.\n\n\nConclusion\n\nThere you have it, folks! We’ve toured through some of JavaScript’s logical and conditional operators, seen them in action, and looked at some real world applications.\n\nThese operators are indispensable tools in your JavaScript toolbox, helping you to write cleaner, more expressive, and more concise code. Whether you’re checking conditions, assigning values, or handling null and undefined, these operators are there to help.\n\nAs always, I’ll continue to share more insights and experiences in the exciting world of JavaScript. To join me on this journey:\n\n * Connect with me on LinkedIn\n * Explore my projects on GitHub\n\nLet’s continue exploring the vast universe of coding together. Happy coding! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-rktq44gxoa90f_s1qhzvbg-jpeg.jpg",
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-07-12T14:21:11.000Z",
            "updated_at": "2024-03-22T19:05:36.000Z",
            "published_at": "2023-07-12T14:21:11.000Z",
            "custom_excerpt": "As JavaScript developers, we often find ourselves writing code that checks conditions and evaluates expressions. While if-else statements…",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdce",
            "uuid": "efbdf193-b03e-4d30-bb36-c1c2d9f803bc",
            "title": "Professor Frisby’s Mostly Adequate Guide: Your Map to the Functional Programming World 🌍",
            "slug": "professor-frisbys-mostly-adequate-guide",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Hey fellow devs, it’s me again, your JavaScript companion, on a quest to conquer another coding beast 🐉.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"You know that euphoric moment when you discover a concept that entirely changes how you see your code? That’s exactly what’s happening to me right now!\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I’ve been diving headfirst into the “Mostly Adequate Guide to Functional Programming” by our dear Professor Frisby.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"While I’m still midway through this book, I thought I’d share some of the cool things I’ve learned so far. Let’s dive into these topics with some simple examples. 🏊‍♂️\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"💡 Before start i want to invite you to read by yourself the book, its free and open for everyone that would like to dive in this world: \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"https://github.com/MostlyAdequate/mostly-adequate-guide\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/MostlyAdequate/mostly-adequate-guide\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-quote\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Immutability: The Unchanging Northern Star 🌟\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Imagine you have a list of friends \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"const friends = ['Alice', 'Bob', 'Charlie']\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now, you meet a new friend, Dave. With immutability in our grasp, we don’t just push Dave into the friends list. We conjure a new list: \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"const newFriends = [...friends, 'Dave']\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The original \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"friends\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" list stands unchanged, while \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"newFriends\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" now welcomes Dave.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This immutability is the superhero we didn't know we needed, helping us avoid those pesky unexpected side-effects and making debugging feel like a walk in the park.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"First-Class Functions:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In JavaScript, functions are first-class citizens. They can be assigned to variables, stored in data structures, passed as arguments to other functions, and even returned as values from other functions.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const sayHello = name => 'Hello, ' + name \\nconst greet = sayHello \\nconsole.log(greet('Readers')) // Outputs: Hello, Readers\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In the example, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":17,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sayHello\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is a function that we're assigning to the variable \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":17,\"mode\":\"normal\",\"style\":\"\",\"text\":\"greet\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". Now, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":17,\"mode\":\"normal\",\"style\":\"\",\"text\":\"greet\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" acts exactly like \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":17,\"mode\":\"normal\",\"style\":\"\",\"text\":\"sayHello\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", greeting the readers with a warm \\\"Hello\\\".\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Declarative Programming:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"“Declarative, as opposed to imperative, means that we will write expressions, as opposed to step by step instructions”\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-quote\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"It’s a mindset switch, we’re going to stop telling the computer how to do the things, and instead focusing more in the results that we want:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"//imperative \\nconst makes = [] \\nfor(let i = 0; i < cars.length; i += 1){ \\n  makes.push(cars[i].make) \\n} \\n//declarative \\nconst makes = cars.map(car => car.make)\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In the imperative version, you’re giving step-by-step instructions: Start at the beginning of the ‘cars’ array, access each car one by one, get the ‘make’ of each car, and add it to the ‘makes’ array.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"On the other hand, the declarative version simply states what you want: “For each car in the ‘cars’ array, give me the ‘make’.” It doesn’t detail \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"how\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" to access each car or \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"how\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" to add each ‘make’ to the array. This is handled by the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"map\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In declarative programming, we concentrate on the ‘what’ while the ‘how’ is taken care of by the language’s built-in functions, like \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"map\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\". This leads to cleaner, more readable code that's easier to reason about.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Composition:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"With function composition, you’re a master architect, creating a mansion from humble bricks. Here’s how:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const double = x => x * 2 \\nconst square = x => x * x \\nconst doubleThenSquare = x => square(double(x)) \\nconsole.log(doubleThenSquare(5)) // Outputs: 100\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"doubleThenSquare\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is a composited function, which first doubles the input and then squares the result. Like a skilled architect, we've crafted a larger function from two smaller ones. Isn't it satisfying?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Pure Functions:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"They’re the buddies that never let you down, providing the same output for the same input, every time, with no side effects.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const multiply = (a, b) => a * b \\nconsole.log(multiply(2, 3)) // Outputs: 6 \\nconsole.log(multiply(2, 3)) // Still outputs: 6\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here, the function \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":17,\"mode\":\"normal\",\"style\":\"\",\"text\":\"multiply\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" is our pure function. Call it a hundred times with the same arguments, and it will consistently give you the same result. Like a well-oiled machine, no hiccups or unpredictability.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Currying:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I dont have words to describe it better. Let’s see it in action:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const add = a => b => a + b \\nconst addFive = add(5) \\nconsole.log(addFive(7)) // Outputs: 12\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Here, our \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"add\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" function is playing coy. It takes the first number and then sends out a new function, eager for the second number.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This is currying, our trick up the sleeve, making our code more flexible and reusable.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Elevate Your JavaScript Skills with Functional Programming 🏅\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"To sum up, functional programming is like a secret weapon 🍲, a magical spell that transfigures your JavaScript from a jumble of instructions into a masterpiece of efficient and elegant code. It’s not merely about getting the job done; it’s about executing it with flair, precision, and grace.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The deeper I delve into this book, the more I feel like Neo in The Matrix, finally perceiving the coding world for what it truly is: a space where all this concepts are \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"not mere optional extras\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", but the core essence of \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"proficient coding.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you’re ready to accept this challenge, if you’re eager to ascend your coding skills, and behold your code in a fresh light, \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I recommend downloading a copy of the “Mostly Adequate Guide to Functional Programming”\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and joining me on this voyage.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s unravel the mysteries of functional programming together, and catapult our JavaScript skills to realms we never envisioned! Until then, keep coding, keep exploring, and as always, may your brackets always match, and your \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"functions be free of side effects\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"! 🚀\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"If you’re interested in staying updated with my future posts, you can follow me on the following links:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":1},{\"children\":[{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"listitem\",\"version\":1,\"value\":2}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"list\",\"version\":1,\"listType\":\"bullet\",\"start\":1,\"tag\":\"ul\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I look forward to connecting with other developers, i would love to know if you liked this new type of post! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p>Hey fellow devs, it’s me again, your JavaScript companion, on a quest to conquer another coding beast 🐉.</p><p>You know that euphoric moment when you discover a concept that entirely changes how you see your code? That’s exactly what’s happening to me right now!</p><p>I’ve been diving headfirst into the “Mostly Adequate Guide to Functional Programming” by our dear Professor Frisby.</p><p>While I’m still midway through this book, I thought I’d share some of the cool things I’ve learned so far. Let’s dive into these topics with some simple examples. 🏊‍♂️</p><blockquote>💡 Before start i want to invite you to read by yourself the book, its free and open for everyone that would like to dive in this world: <a href=\"https://github.com/MostlyAdequate/mostly-adequate-guide\" rel=\"noopener\">https://github.com/MostlyAdequate/mostly-adequate-guide</a></blockquote><h3 id=\"immutability-the-unchanging-northern-star-%F0%9F%8C%9F\">Immutability: The Unchanging Northern Star 🌟</h3><p>Imagine you have a list of friends <code>const friends = ['Alice', 'Bob', 'Charlie']</code>.</p><p>Now, you meet a new friend, Dave. With immutability in our grasp, we don’t just push Dave into the friends list. We conjure a new list: <code>const newFriends = [...friends, 'Dave']</code>.</p><p>The original <code>friends</code> list stands unchanged, while <code>newFriends</code> now welcomes Dave.</p><p>This immutability is the superhero we didn't know we needed, helping us avoid those pesky unexpected side-effects and making debugging feel like a walk in the park.</p><h3 id=\"first-class-functions\">First-Class Functions:</h3><p>In JavaScript, functions are first-class citizens. They can be assigned to variables, stored in data structures, passed as arguments to other functions, and even returned as values from other functions.</p><pre><code class=\"language-javascript\">const sayHello = name =&gt; 'Hello, ' + name \nconst greet = sayHello \nconsole.log(greet('Readers')) // Outputs: Hello, Readers</code></pre><p>In the example, <strong><code>sayHello</code></strong> is a function that we're assigning to the variable <strong><code>greet</code></strong>. Now, <strong><code>greet</code></strong> acts exactly like <strong><code>sayHello</code></strong>, greeting the readers with a warm \"Hello\".</p><h3 id=\"declarative-programming\">Declarative Programming:</h3><blockquote>“Declarative, as opposed to imperative, means that we will write expressions, as opposed to step by step instructions”</blockquote><p>It’s a mindset switch, we’re going to stop telling the computer how to do the things, and instead focusing more in the results that we want:</p><pre><code class=\"language-javascript\">//imperative \nconst makes = [] \nfor(let i = 0; i &lt; cars.length; i += 1){ \n  makes.push(cars[i].make) \n} \n//declarative \nconst makes = cars.map(car =&gt; car.make)</code></pre><p>In the imperative version, you’re giving step-by-step instructions: Start at the beginning of the ‘cars’ array, access each car one by one, get the ‘make’ of each car, and add it to the ‘makes’ array.</p><p>On the other hand, the declarative version simply states what you want: “For each car in the ‘cars’ array, give me the ‘make’.” It doesn’t detail <strong>how</strong> to access each car or <strong>how</strong> to add each ‘make’ to the array. This is handled by the <code>map</code> function.</p><p>In declarative programming, we concentrate on the ‘what’ while the ‘how’ is taken care of by the language’s built-in functions, like <code>map</code>. This leads to cleaner, more readable code that's easier to reason about.</p><h3 id=\"composition\">Composition:</h3><p>With function composition, you’re a master architect, creating a mansion from humble bricks. Here’s how:</p><pre><code class=\"language-javascript\">const double = x =&gt; x * 2 \nconst square = x =&gt; x * x \nconst doubleThenSquare = x =&gt; square(double(x)) \nconsole.log(doubleThenSquare(5)) // Outputs: 100</code></pre><p>Here, <code>doubleThenSquare</code> is a composited function, which first doubles the input and then squares the result. Like a skilled architect, we've crafted a larger function from two smaller ones. Isn't it satisfying?</p><h3 id=\"pure-functions\">Pure Functions:</h3><p>They’re the buddies that never let you down, providing the same output for the same input, every time, with no side effects.</p><pre><code class=\"language-javascript\">const multiply = (a, b) =&gt; a * b \nconsole.log(multiply(2, 3)) // Outputs: 6 \nconsole.log(multiply(2, 3)) // Still outputs: 6</code></pre><p>Here, the function <strong><code>multiply</code></strong> is our pure function. Call it a hundred times with the same arguments, and it will consistently give you the same result. Like a well-oiled machine, no hiccups or unpredictability.</p><h3 id=\"currying\">Currying:</h3><p>I dont have words to describe it better. Let’s see it in action:</p><pre><code class=\"language-javascript\">const add = a =&gt; b =&gt; a + b \nconst addFive = add(5) \nconsole.log(addFive(7)) // Outputs: 12</code></pre><p>Here, our <code>add</code> function is playing coy. It takes the first number and then sends out a new function, eager for the second number.</p><p>This is currying, our trick up the sleeve, making our code more flexible and reusable.</p><h3 id=\"elevate-your-javascript-skills-with-functional-programming-%F0%9F%8F%85\">Elevate Your JavaScript Skills with Functional Programming 🏅</h3><p>To sum up, functional programming is like a secret weapon 🍲, a magical spell that transfigures your JavaScript from a jumble of instructions into a masterpiece of efficient and elegant code. It’s not merely about getting the job done; it’s about executing it with flair, precision, and grace.</p><p>The deeper I delve into this book, the more I feel like Neo in The Matrix, finally perceiving the coding world for what it truly is: a space where all this concepts are <strong>not mere optional extras</strong>, but the core essence of <strong>proficient coding.</strong></p><p>If you’re ready to accept this challenge, if you’re eager to ascend your coding skills, and behold your code in a fresh light, <strong>I recommend downloading a copy of the “Mostly Adequate Guide to Functional Programming”</strong> and joining me on this voyage.</p><p>Let’s unravel the mysteries of functional programming together, and catapult our JavaScript skills to realms we never envisioned! Until then, keep coding, keep exploring, and as always, may your brackets always match, and your <strong>functions be free of side effects</strong>! 🚀</p><p>If you’re interested in staying updated with my future posts, you can follow me on the following links:</p><ul><li><a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a></li><li><a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></li></ul><p>I look forward to connecting with other developers, i would love to know if you liked this new type of post! 😃</p>",
            "comment_id": "7142ff20d7f3",
            "plaintext": "Hey fellow devs, it’s me again, your JavaScript companion, on a quest to conquer another coding beast 🐉.\n\nYou know that euphoric moment when you discover a concept that entirely changes how you see your code? That’s exactly what’s happening to me right now!\n\nI’ve been diving headfirst into the “Mostly Adequate Guide to Functional Programming” by our dear Professor Frisby.\n\nWhile I’m still midway through this book, I thought I’d share some of the cool things I’ve learned so far. Let’s dive into these topics with some simple examples. 🏊‍♂️\n\n💡 Before start i want to invite you to read by yourself the book, its free and open for everyone that would like to dive in this world: https://github.com/MostlyAdequate/mostly-adequate-guide\n\n\nImmutability: The Unchanging Northern Star 🌟\n\nImagine you have a list of friends const friends = ['Alice', 'Bob', 'Charlie'].\n\nNow, you meet a new friend, Dave. With immutability in our grasp, we don’t just push Dave into the friends list. We conjure a new list: const newFriends = [...friends, 'Dave'].\n\nThe original friends list stands unchanged, while newFriends now welcomes Dave.\n\nThis immutability is the superhero we didn't know we needed, helping us avoid those pesky unexpected side-effects and making debugging feel like a walk in the park.\n\n\nFirst-Class Functions:\n\nIn JavaScript, functions are first-class citizens. They can be assigned to variables, stored in data structures, passed as arguments to other functions, and even returned as values from other functions.\n\nconst sayHello = name => 'Hello, ' + name \nconst greet = sayHello \nconsole.log(greet('Readers')) // Outputs: Hello, Readers\n\nIn the example, sayHello is a function that we're assigning to the variable greet. Now, greet acts exactly like sayHello, greeting the readers with a warm \"Hello\".\n\n\nDeclarative Programming:\n\n“Declarative, as opposed to imperative, means that we will write expressions, as opposed to step by step instructions”\n\nIt’s a mindset switch, we’re going to stop telling the computer how to do the things, and instead focusing more in the results that we want:\n\n//imperative \nconst makes = [] \nfor(let i = 0; i < cars.length; i += 1){ \n  makes.push(cars[i].make) \n} \n//declarative \nconst makes = cars.map(car => car.make)\n\nIn the imperative version, you’re giving step-by-step instructions: Start at the beginning of the ‘cars’ array, access each car one by one, get the ‘make’ of each car, and add it to the ‘makes’ array.\n\nOn the other hand, the declarative version simply states what you want: “For each car in the ‘cars’ array, give me the ‘make’.” It doesn’t detail how to access each car or how to add each ‘make’ to the array. This is handled by the map function.\n\nIn declarative programming, we concentrate on the ‘what’ while the ‘how’ is taken care of by the language’s built-in functions, like map. This leads to cleaner, more readable code that's easier to reason about.\n\n\nComposition:\n\nWith function composition, you’re a master architect, creating a mansion from humble bricks. Here’s how:\n\nconst double = x => x * 2 \nconst square = x => x * x \nconst doubleThenSquare = x => square(double(x)) \nconsole.log(doubleThenSquare(5)) // Outputs: 100\n\nHere, doubleThenSquare is a composited function, which first doubles the input and then squares the result. Like a skilled architect, we've crafted a larger function from two smaller ones. Isn't it satisfying?\n\n\nPure Functions:\n\nThey’re the buddies that never let you down, providing the same output for the same input, every time, with no side effects.\n\nconst multiply = (a, b) => a * b \nconsole.log(multiply(2, 3)) // Outputs: 6 \nconsole.log(multiply(2, 3)) // Still outputs: 6\n\nHere, the function multiply is our pure function. Call it a hundred times with the same arguments, and it will consistently give you the same result. Like a well-oiled machine, no hiccups or unpredictability.\n\n\nCurrying:\n\nI dont have words to describe it better. Let’s see it in action:\n\nconst add = a => b => a + b \nconst addFive = add(5) \nconsole.log(addFive(7)) // Outputs: 12\n\nHere, our add function is playing coy. It takes the first number and then sends out a new function, eager for the second number.\n\nThis is currying, our trick up the sleeve, making our code more flexible and reusable.\n\n\nElevate Your JavaScript Skills with Functional Programming 🏅\n\nTo sum up, functional programming is like a secret weapon 🍲, a magical spell that transfigures your JavaScript from a jumble of instructions into a masterpiece of efficient and elegant code. It’s not merely about getting the job done; it’s about executing it with flair, precision, and grace.\n\nThe deeper I delve into this book, the more I feel like Neo in The Matrix, finally perceiving the coding world for what it truly is: a space where all this concepts are not mere optional extras, but the core essence of proficient coding.\n\nIf you’re ready to accept this challenge, if you’re eager to ascend your coding skills, and behold your code in a fresh light, I recommend downloading a copy of the “Mostly Adequate Guide to Functional Programming” and joining me on this voyage.\n\nLet’s unravel the mysteries of functional programming together, and catapult our JavaScript skills to realms we never envisioned! Until then, keep coding, keep exploring, and as always, may your brackets always match, and your functions be free of side effects! 🚀\n\nIf you’re interested in staying updated with my future posts, you can follow me on the following links:\n\n * LinkedIn\n * GitHub\n\nI look forward to connecting with other developers, i would love to know if you liked this new type of post! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-gw9dhmznzgtou7xadled3q-jpeg.jpg",
            "featured": 0,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-06-26T01:30:05.000Z",
            "updated_at": "2024-03-22T21:02:09.000Z",
            "published_at": "2023-06-26T01:30:05.000Z",
            "custom_excerpt": "Hey fellow devs, it’s me again, your JavaScript companion, on a quest to conquer another coding beast 🐉.",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "65fd1a494311690001e6cdcf",
            "uuid": "d0116c1e-79e8-44a3-8fc0-21d2248b5367",
            "title": "Custom Hooks in React: Flexibility and Reusability Unleashed",
            "slug": "custom-hooks-in-react-flexibility-and-reusability-unleashed",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Greetings developers! As we continue our journey into the depths of JavaScript and its frameworks, today we’ll explore a unique and powerful feature of React: Custom Hooks\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" 😎\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":2,\"mode\":\"normal\",\"style\":\"\",\"text\":\". This core concept reshapes the way we manage state and side effects, streamlining our code, and improving reusability across components.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Beyond Built-In Hooks\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Custom Hooks in React let us extract and encapsulate logic from function components, allowing for code sharing and reuse across multiple components. This leads to cleaner, more maintainable code that adheres to the DRY (Don’t Repeat Yourself 🔁) principle.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s say we often need to fetch data from an API and use it within our components. Instead of repeatedly writing \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useEffect\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useState\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" in each component, we can create a custom hook:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const useFetch = (url) => { \\n  const [data, setData] = useState(null) \\n  useEffect(() => { \\n    fetch(url) \\n      .then(response => response.json()) \\n      .then(data => setData(data)) \\n  }, [url]) \\n return data \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useFetch\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" Custom Hook takes a URL as an argument, performs the data fetching operation, and returns the fetched data.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Our components become more concise as we utilize our custom hooks:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const Component = () => { \\n  const data = useFetch('<https://api.example.com/data>') \\n  return <div>{data}</div> \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This implementation is not only clean and simple but it also allows us to reuse the same data fetching logic in other components merely by invoking the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useFetch\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" hook.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Furthering Flexibility with Custom Hooks\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Custom Hooks are flexible. They can handle any logic that built-in hooks can: stateful logic, side effects, context, reducers, and more. For instance, you can create a custom hook to manage form inputs:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const useFormInput = (initialValue) => { \\n  const [value, setValue] = useState(initialValue) \\n  const handleChange = (event) => { \\n    setValue(event.target.value) \\n  } \\n  return [value, handleChange] \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Now, any form element in your application can benefit from this hook:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"const FormComponent = () => { \\n  const [name, handleNameChange] = useFormInput(''); \\n  const [email, handleEmailChange] = useFormInput(''); \\n  return ( \\n    <form> \\n      <input type=\\\"text\\\" value={name} onChange={handleNameChange} /> \\n      <input type=\\\"text\\\" value={email} onChange={handleEmailChange} /> \\n    </form> \\n  ); \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"This flexibility, combined with their ability to be combined, makes custom hooks a powerful tool in the React toolbox.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Extending Custom Hooks: Abstracting Libraries\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Custom Hooks can abstract and share instances of libraries across different components. They can encapsulate not just state logic or side effects, but also the logic related to the usage of external libraries.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Consider the case in which various components in our application are harnessing the power of Amplitude, a robust product analytics resource I’ve previously unpacked in a previous post. Let’s delve into a tangible example that demystifies how we can optimize this process by applying a Custom Hook that embodies the functionality of Amplitude.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"The Scenario\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import * as amplitude from '@amplitude/analytics-browser' \\n \\nconst ButtonA = () => { \\n  return ( \\n    <button onClick={()=> amplitude.track('BUTTON_A_USED')}> \\n      Press me! \\n    </button> \\n    ) \\n } \\n// in another file you may have: \\nimport * as amplitude from 'amplitude-analytics' \\n \\nconst ButtonB = () => { \\n  return ( \\n    <button onClick={()=> amplitude.track('BUTTON_B_USED')}> \\n      Press me! \\n    </button> \\n    ) \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"In this approach, both \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"ButtonA\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"ButtonB\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" components are interacting independently with an Amplitude instance, leading to code repetition.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Refactoring with a Custom Hook\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Instead of duplicating the code across the components, we can introduce a Custom Hook that abstracts the Amplitude functionality, facilitating centralized management:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import * as amplitude from '@amplitude/analytics-browser'; \\n// A detail is that this also significantly reduces the number of imports \\n \\nconst useAmplitudeTracker = () => { \\n  const trackEventA = () => amplitude.track('BUTTON_A_USED') \\n  const trackEventB = () => amplitude.track('BUTTON_B_USED') \\n  return {  \\n    trackEventA,  \\n    trackEventB, \\n    //and this is extensible for all your needs \\n    } \\n}; \\n \\nexport default useAmplitudeTracker\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"We can now refactor our \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"ButtonA\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" and \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"ButtonB\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" components to leverage this hook:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"type\":\"codeblock\",\"version\":1,\"code\":\"import useAmplitudeTracker from './your/route/for/hooks' \\n \\nconst ButtonA = () => { \\n  const { trackEventA } = useAmplitudeTracker() \\n    return ( \\n      <button onClick={()=> trackEventA()}> \\n        Press me! \\n      </button> \\n      ) \\n} \\nimport useAmplitudeTracker from './your/route/for/hooks' \\n \\nconst ButtonB = () => { \\n  const { trackEventB } = useAmplitudeTracker() \\n    return ( \\n      <button onClick={()=> trackEventB()}> \\n        Press me! \\n      </button> \\n      ) \\n}\",\"language\":\"javascript\",\"caption\":\"\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Our components are much cleaner now. Any shared logic for Amplitude use is maintained in one place — the \",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":16,\"mode\":\"normal\",\"style\":\"\",\"text\":\"useAmplitudeTracker\",\"type\":\"extended-text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" hook.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Benefits and Conclusion\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"extended-heading\",\"version\":1,\"tag\":\"h3\"},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Custom Hooks stand as a game-changing force in React development. They reshape our code into more flexible, maintainable, and elegant forms, enhancing reusability and upholding the DRY (Don’t Repeat Yourself) principle, is funny because im repeating it, but is important to take care of that principle 😆.\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Embarking on the journey of creating your Custom Hooks empowers you to encapsulate any kind of logic. So, why not dive in, create your own hooks, and unlock the immense potential they offer?\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"As a JavaScript developer in an ever-evolving startup ecosystem, I will be sharing more of my experiences and insights. Stay updated and join me on this exciting journey:\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- Connect with me on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"LinkedIn\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://www.linkedin.com/in/ian-duhamel/\"},{\"type\":\"linebreak\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"- Explore my projects on \",\"type\":\"extended-text\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":1,\"mode\":\"normal\",\"style\":\"\",\"text\":\"GitHub\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"link\",\"version\":1,\"rel\":\"noopener\",\"target\":null,\"title\":null,\"url\":\"https://github.com/Ianduha13\"}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1},{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"Let’s dive into the vast coding universe together. Happy coding! 😃\",\"type\":\"extended-text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "<p><em>Greetings developers! As we continue our journey into the depths of JavaScript and its frameworks, today we’ll explore a unique and powerful feature of React: Custom Hooks</em> 😎<em>. This core concept reshapes the way we manage state and side effects, streamlining our code, and improving reusability across components.</em></p><h3 id=\"beyond-built-in-hooks\">Beyond Built-In Hooks</h3><p>Custom Hooks in React let us extract and encapsulate logic from function components, allowing for code sharing and reuse across multiple components. This leads to cleaner, more maintainable code that adheres to the DRY (Don’t Repeat Yourself 🔁) principle.</p><p>Let’s say we often need to fetch data from an API and use it within our components. Instead of repeatedly writing <code>useEffect</code> and <code>useState</code> in each component, we can create a custom hook:</p><pre><code class=\"language-javascript\">const useFetch = (url) =&gt; { \n  const [data, setData] = useState(null) \n  useEffect(() =&gt; { \n    fetch(url) \n      .then(response =&gt; response.json()) \n      .then(data =&gt; setData(data)) \n  }, [url]) \n return data \n}</code></pre><p>This <code>useFetch</code> Custom Hook takes a URL as an argument, performs the data fetching operation, and returns the fetched data.</p><p>Our components become more concise as we utilize our custom hooks:</p><pre><code class=\"language-javascript\">const Component = () =&gt; { \n  const data = useFetch('&lt;https://api.example.com/data&gt;') \n  return &lt;div&gt;{data}&lt;/div&gt; \n}</code></pre><p>This implementation is not only clean and simple but it also allows us to reuse the same data fetching logic in other components merely by invoking the <code>useFetch</code> hook.</p><h3 id=\"furthering-flexibility-with-custom-hooks\">Furthering Flexibility with Custom Hooks</h3><p>Custom Hooks are flexible. They can handle any logic that built-in hooks can: stateful logic, side effects, context, reducers, and more. For instance, you can create a custom hook to manage form inputs:</p><pre><code class=\"language-javascript\">const useFormInput = (initialValue) =&gt; { \n  const [value, setValue] = useState(initialValue) \n  const handleChange = (event) =&gt; { \n    setValue(event.target.value) \n  } \n  return [value, handleChange] \n}</code></pre><p>Now, any form element in your application can benefit from this hook:</p><pre><code class=\"language-javascript\">const FormComponent = () =&gt; { \n  const [name, handleNameChange] = useFormInput(''); \n  const [email, handleEmailChange] = useFormInput(''); \n  return ( \n    &lt;form&gt; \n      &lt;input type=\"text\" value={name} onChange={handleNameChange} /&gt; \n      &lt;input type=\"text\" value={email} onChange={handleEmailChange} /&gt; \n    &lt;/form&gt; \n  ); \n}</code></pre><p>This flexibility, combined with their ability to be combined, makes custom hooks a powerful tool in the React toolbox.</p><h3 id=\"extending-custom-hooks-abstracting-libraries\">Extending Custom Hooks: Abstracting Libraries</h3><p>Custom Hooks can abstract and share instances of libraries across different components. They can encapsulate not just state logic or side effects, but also the logic related to the usage of external libraries.</p><p>Consider the case in which various components in our application are harnessing the power of Amplitude, a robust product analytics resource I’ve previously unpacked in a previous post. Let’s delve into a tangible example that demystifies how we can optimize this process by applying a Custom Hook that embodies the functionality of Amplitude.</p><h3 id=\"the-scenario\">The Scenario</h3><pre><code class=\"language-javascript\">import * as amplitude from '@amplitude/analytics-browser' \n \nconst ButtonA = () =&gt; { \n  return ( \n    &lt;button onClick={()=&gt; amplitude.track('BUTTON_A_USED')}&gt; \n      Press me! \n    &lt;/button&gt; \n    ) \n } \n// in another file you may have: \nimport * as amplitude from 'amplitude-analytics' \n \nconst ButtonB = () =&gt; { \n  return ( \n    &lt;button onClick={()=&gt; amplitude.track('BUTTON_B_USED')}&gt; \n      Press me! \n    &lt;/button&gt; \n    ) \n}</code></pre><p>In this approach, both <code>ButtonA</code> and <code>ButtonB</code> components are interacting independently with an Amplitude instance, leading to code repetition.</p><h3 id=\"refactoring-with-a-custom-hook\">Refactoring with a Custom Hook</h3><p>Instead of duplicating the code across the components, we can introduce a Custom Hook that abstracts the Amplitude functionality, facilitating centralized management:</p><pre><code class=\"language-javascript\">import * as amplitude from '@amplitude/analytics-browser'; \n// A detail is that this also significantly reduces the number of imports \n \nconst useAmplitudeTracker = () =&gt; { \n  const trackEventA = () =&gt; amplitude.track('BUTTON_A_USED') \n  const trackEventB = () =&gt; amplitude.track('BUTTON_B_USED') \n  return {  \n    trackEventA,  \n    trackEventB, \n    //and this is extensible for all your needs \n    } \n}; \n \nexport default useAmplitudeTracker</code></pre><p>We can now refactor our <code>ButtonA</code> and <code>ButtonB</code> components to leverage this hook:</p><pre><code class=\"language-javascript\">import useAmplitudeTracker from './your/route/for/hooks' \n \nconst ButtonA = () =&gt; { \n  const { trackEventA } = useAmplitudeTracker() \n    return ( \n      &lt;button onClick={()=&gt; trackEventA()}&gt; \n        Press me! \n      &lt;/button&gt; \n      ) \n} \nimport useAmplitudeTracker from './your/route/for/hooks' \n \nconst ButtonB = () =&gt; { \n  const { trackEventB } = useAmplitudeTracker() \n    return ( \n      &lt;button onClick={()=&gt; trackEventB()}&gt; \n        Press me! \n      &lt;/button&gt; \n      ) \n}</code></pre><p>Our components are much cleaner now. Any shared logic for Amplitude use is maintained in one place — the <code>useAmplitudeTracker</code> hook.</p><h3 id=\"benefits-and-conclusion\">Benefits and Conclusion</h3><p>Custom Hooks stand as a game-changing force in React development. They reshape our code into more flexible, maintainable, and elegant forms, enhancing reusability and upholding the DRY (Don’t Repeat Yourself) principle, is funny because im repeating it, but is important to take care of that principle 😆.</p><p>Embarking on the journey of creating your Custom Hooks empowers you to encapsulate any kind of logic. So, why not dive in, create your own hooks, and unlock the immense potential they offer?</p><p>As a JavaScript developer in an ever-evolving startup ecosystem, I will be sharing more of my experiences and insights. Stay updated and join me on this exciting journey:</p><p>- Connect with me on <a href=\"https://www.linkedin.com/in/ian-duhamel/\" rel=\"noopener\"><strong>LinkedIn</strong></a><br>- Explore my projects on <a href=\"https://github.com/Ianduha13\" rel=\"noopener\"><strong>GitHub</strong></a></p><p>Let’s dive into the vast coding universe together. Happy coding! 😃</p>",
            "comment_id": "768f7df3b945",
            "plaintext": "Greetings developers! As we continue our journey into the depths of JavaScript and its frameworks, today we’ll explore a unique and powerful feature of React: Custom Hooks 😎. This core concept reshapes the way we manage state and side effects, streamlining our code, and improving reusability across components.\n\n\nBeyond Built-In Hooks\n\nCustom Hooks in React let us extract and encapsulate logic from function components, allowing for code sharing and reuse across multiple components. This leads to cleaner, more maintainable code that adheres to the DRY (Don’t Repeat Yourself 🔁) principle.\n\nLet’s say we often need to fetch data from an API and use it within our components. Instead of repeatedly writing useEffect and useState in each component, we can create a custom hook:\n\nconst useFetch = (url) => { \n  const [data, setData] = useState(null) \n  useEffect(() => { \n    fetch(url) \n      .then(response => response.json()) \n      .then(data => setData(data)) \n  }, [url]) \n return data \n}\n\nThis useFetch Custom Hook takes a URL as an argument, performs the data fetching operation, and returns the fetched data.\n\nOur components become more concise as we utilize our custom hooks:\n\nconst Component = () => { \n  const data = useFetch('<https://api.example.com/data>') \n  return <div>{data}</div> \n}\n\nThis implementation is not only clean and simple but it also allows us to reuse the same data fetching logic in other components merely by invoking the useFetch hook.\n\n\nFurthering Flexibility with Custom Hooks\n\nCustom Hooks are flexible. They can handle any logic that built-in hooks can: stateful logic, side effects, context, reducers, and more. For instance, you can create a custom hook to manage form inputs:\n\nconst useFormInput = (initialValue) => { \n  const [value, setValue] = useState(initialValue) \n  const handleChange = (event) => { \n    setValue(event.target.value) \n  } \n  return [value, handleChange] \n}\n\nNow, any form element in your application can benefit from this hook:\n\nconst FormComponent = () => { \n  const [name, handleNameChange] = useFormInput(''); \n  const [email, handleEmailChange] = useFormInput(''); \n  return ( \n    <form> \n      <input type=\"text\" value={name} onChange={handleNameChange} /> \n      <input type=\"text\" value={email} onChange={handleEmailChange} /> \n    </form> \n  ); \n}\n\nThis flexibility, combined with their ability to be combined, makes custom hooks a powerful tool in the React toolbox.\n\n\nExtending Custom Hooks: Abstracting Libraries\n\nCustom Hooks can abstract and share instances of libraries across different components. They can encapsulate not just state logic or side effects, but also the logic related to the usage of external libraries.\n\nConsider the case in which various components in our application are harnessing the power of Amplitude, a robust product analytics resource I’ve previously unpacked in a previous post. Let’s delve into a tangible example that demystifies how we can optimize this process by applying a Custom Hook that embodies the functionality of Amplitude.\n\n\nThe Scenario\n\nimport * as amplitude from '@amplitude/analytics-browser' \n \nconst ButtonA = () => { \n  return ( \n    <button onClick={()=> amplitude.track('BUTTON_A_USED')}> \n      Press me! \n    </button> \n    ) \n } \n// in another file you may have: \nimport * as amplitude from 'amplitude-analytics' \n \nconst ButtonB = () => { \n  return ( \n    <button onClick={()=> amplitude.track('BUTTON_B_USED')}> \n      Press me! \n    </button> \n    ) \n}\n\nIn this approach, both ButtonA and ButtonB components are interacting independently with an Amplitude instance, leading to code repetition.\n\n\nRefactoring with a Custom Hook\n\nInstead of duplicating the code across the components, we can introduce a Custom Hook that abstracts the Amplitude functionality, facilitating centralized management:\n\nimport * as amplitude from '@amplitude/analytics-browser'; \n// A detail is that this also significantly reduces the number of imports \n \nconst useAmplitudeTracker = () => { \n  const trackEventA = () => amplitude.track('BUTTON_A_USED') \n  const trackEventB = () => amplitude.track('BUTTON_B_USED') \n  return {  \n    trackEventA,  \n    trackEventB, \n    //and this is extensible for all your needs \n    } \n}; \n \nexport default useAmplitudeTracker\n\nWe can now refactor our ButtonA and ButtonB components to leverage this hook:\n\nimport useAmplitudeTracker from './your/route/for/hooks' \n \nconst ButtonA = () => { \n  const { trackEventA } = useAmplitudeTracker() \n    return ( \n      <button onClick={()=> trackEventA()}> \n        Press me! \n      </button> \n      ) \n} \nimport useAmplitudeTracker from './your/route/for/hooks' \n \nconst ButtonB = () => { \n  const { trackEventB } = useAmplitudeTracker() \n    return ( \n      <button onClick={()=> trackEventB()}> \n        Press me! \n      </button> \n      ) \n}\n\nOur components are much cleaner now. Any shared logic for Amplitude use is maintained in one place — the useAmplitudeTracker hook.\n\n\nBenefits and Conclusion\n\nCustom Hooks stand as a game-changing force in React development. They reshape our code into more flexible, maintainable, and elegant forms, enhancing reusability and upholding the DRY (Don’t Repeat Yourself) principle, is funny because im repeating it, but is important to take care of that principle 😆.\n\nEmbarking on the journey of creating your Custom Hooks empowers you to encapsulate any kind of logic. So, why not dive in, create your own hooks, and unlock the immense potential they offer?\n\nAs a JavaScript developer in an ever-evolving startup ecosystem, I will be sharing more of my experiences and insights. Stay updated and join me on this exciting journey:\n\n- Connect with me on LinkedIn\n- Explore my projects on GitHub\n\nLet’s dive into the vast coding universe together. Happy coding! 😃",
            "feature_image": "__GHOST_URL__/content/images/2024/03/1-dzi0owgucoxha16qvfxqjq-jpeg.jpg",
            "featured": 1,
            "type": "post",
            "status": "published",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2023-06-29T22:32:03.000Z",
            "updated_at": "2024-03-22T19:03:23.000Z",
            "published_at": "2023-06-29T22:32:03.000Z",
            "custom_excerpt": "Custom Hooks in React let us extract and encapsulate logic from function components, allowing for code sharing and reuse across multiple components. ",
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          },
          {
            "id": "6602ae36886141000130789b",
            "uuid": "13db7310-7072-41ca-8dd1-404fb75599d9",
            "title": "(Untitled)",
            "slug": "untitled",
            "mobiledoc": null,
            "lexical": "{\"root\":{\"children\":[{\"type\":\"html\",\"version\":1,\"html\":\"<aside>\\n    <h1>si queres podes escribir html</h1>\\n    <h2>y lo interpreta</h2>\\n</aside>\"},{\"type\":\"gallery\",\"version\":1,\"images\":[],\"caption\":\"\"},{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
            "html": "\n<!--kg-card-begin: html-->\n<aside>\n    <h1>si queres podes escribir html</h1>\n    <h2>y lo interpreta</h2>\n</aside>\n<!--kg-card-end: html-->\n",
            "comment_id": "6602ae36886141000130789b",
            "plaintext": "\n\n\n\n\n\n\nsi queres podes escribir html\n\n\n\ny lo interpreta\n\n\n",
            "feature_image": null,
            "featured": 0,
            "type": "post",
            "status": "draft",
            "locale": null,
            "visibility": "public",
            "email_recipient_filter": "all",
            "created_at": "2024-03-26T11:15:02.000Z",
            "updated_at": "2024-03-26T11:16:03.000Z",
            "published_at": null,
            "custom_excerpt": null,
            "codeinjection_head": null,
            "codeinjection_foot": null,
            "custom_template": null,
            "canonical_url": null,
            "newsletter_id": null,
            "show_title_and_feature_image": 1
          }
        ]
      }
    }
  ]
}